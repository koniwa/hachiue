{"version":3,"file":"wavesurfer.timeline.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./src/plugin/timeline/index.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"timeline\"] = factory();\n})(self, () => {\nreturn ","/**\n * @typedef {Object} TimelinePluginParams\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the timeline should be drawn. This is the only required parameter.\n * @property {number} notchPercentHeight=90 Height of notches in percent\n * @property {string} unlabeledNotchColor='#c0c0c0' The colour of the notches\n * that do not have labels\n * @property {string} primaryColor='#000' The colour of the main notches\n * @property {string} secondaryColor='#c0c0c0' The colour of the secondary\n * notches\n * @property {string} primaryFontColor='#000' The colour of the labels next to\n * the main notches\n * @property {string} secondaryFontColor='#000' The colour of the labels next to\n * the secondary notches\n * @property {number} labelPadding=5 The padding between the label and the notch\n * @property {?number} zoomDebounce A debounce timeout to increase rendering\n * performance for large files\n * @property {string} fontFamily='Arial'\n * @property {number} fontSize=10 Font size of labels in pixels\n * @property {?number} duration Length of the track in seconds. Overrides\n * getDuration() for setting length of timeline\n * @property {function} formatTimeCallback (sec, pxPerSec) -> label\n * @property {function} timeInterval (pxPerSec) -> seconds between notches\n * @property {function} primaryLabelInterval (pxPerSec) -> cadence between\n * labels in primary color\n * @property {function} secondaryLabelInterval (pxPerSec) -> cadence between\n * labels in secondary color\n * @property {?number} offset Offset for the timeline start in seconds. May also be\n * negative.\n * @property {?boolean} deferInit Set to true to manually call\n * `initPlugin('timeline')`\n */\n\n/**\n * Adds a timeline to the waveform.\n *\n * @implements {PluginClass}\n * @extends {Observer}\n * @example\n * // es6\n * import TimelinePlugin from 'wavesurfer.timeline.js';\n *\n * // commonjs\n * var TimelinePlugin = require('wavesurfer.timeline.js');\n *\n * // if you are using <script> tags\n * var TimelinePlugin = window.WaveSurfer.timeline;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     TimelinePlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class TimelinePlugin {\n    /**\n     * Timeline plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param  {TimelinePluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'timeline',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            instance: TimelinePlugin\n        };\n    }\n\n    // event handlers\n    _onScroll = () => {\n        if (this.wrapper && this.drawer.wrapper) {\n            this.wrapper.scrollLeft = this.drawer.wrapper.scrollLeft;\n        }\n    };\n\n    /**\n     * @returns {void}\n     */\n    _onRedraw = () => this.render();\n\n    _onReady = () => {\n        const ws = this.wavesurfer;\n        this.drawer = ws.drawer;\n        this.pixelRatio = ws.drawer.params.pixelRatio;\n        this.maxCanvasWidth = ws.drawer.maxCanvasWidth || ws.drawer.width;\n        this.maxCanvasElementWidth =\n            ws.drawer.maxCanvasElementWidth ||\n            Math.round(this.maxCanvasWidth / this.pixelRatio);\n\n        // add listeners\n        ws.drawer.wrapper.addEventListener('scroll', this._onScroll);\n        ws.on('redraw', this._onRedraw);\n        ws.on('zoom', this._onZoom);\n\n        this.render();\n    };\n\n    /**\n     * @param {object} e Click event\n     */\n    _onWrapperClick = e => {\n        e.preventDefault();\n        const relX = 'offsetX' in e ? e.offsetX : e.layerX;\n        this.fireEvent('click', relX / this.wrapper.scrollWidth || 0);\n    };\n\n    /**\n     * Creates an instance of TimelinePlugin.\n     *\n     * You probably want to use TimelinePlugin.create()\n     *\n     * @param {TimelinePluginParams} params Plugin parameters\n     * @param {object} ws Wavesurfer instance\n     */\n    constructor(params, ws) {\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(params.container)\n                : params.container;\n\n        if (!this.container) {\n            throw new Error('No container for wavesurfer timeline');\n        }\n\n        this.wavesurfer = ws;\n        this.util = ws.util;\n        this.params = Object.assign(\n            {},\n            {\n                height: 20,\n                notchPercentHeight: 90,\n                labelPadding: 5,\n                unlabeledNotchColor: '#c0c0c0',\n                primaryColor: '#000',\n                secondaryColor: '#c0c0c0',\n                primaryFontColor: '#000',\n                secondaryFontColor: '#000',\n                fontFamily: 'Arial',\n                fontSize: 10,\n                duration: null,\n                zoomDebounce: false,\n                formatTimeCallback: this.defaultFormatTimeCallback,\n                timeInterval: this.defaultTimeInterval,\n                primaryLabelInterval: this.defaultPrimaryLabelInterval,\n                secondaryLabelInterval: this.defaultSecondaryLabelInterval,\n                offset: 0\n            },\n            params\n        );\n\n        this.canvases = [];\n        this.wrapper = null;\n        this.drawer = null;\n        this.pixelRatio = null;\n        this.maxCanvasWidth = null;\n        this.maxCanvasElementWidth = null;\n        /**\n         * This event handler has to be in the constructor function because it\n         * relies on the debounce function which is only available after\n         * instantiation\n         *\n         * Use a debounced function if `params.zoomDebounce` is defined\n         *\n         * @returns {void}\n         */\n        this._onZoom = this.params.zoomDebounce\n            ? this.wavesurfer.util.debounce(\n                () => this.render(),\n                this.params.zoomDebounce\n            )\n            : () => this.render();\n    }\n\n    /**\n     * Initialisation function used by the plugin API\n     */\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n        }\n    }\n\n    /**\n     * Destroy function used by the plugin API\n     */\n    destroy() {\n        this.unAll();\n        this.wavesurfer.un('redraw', this._onRedraw);\n        this.wavesurfer.un('zoom', this._onZoom);\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.drawer.wrapper.removeEventListener(\n            'scroll',\n            this._onScroll\n        );\n        if (this.wrapper && this.wrapper.parentNode) {\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\n            this.wrapper.parentNode.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    }\n\n    /**\n     * Create a timeline element to wrap the canvases drawn by this plugin\n     *\n     */\n    createWrapper() {\n        const wsParams = this.wavesurfer.params;\n        this.container.innerHTML = '';\n        this.wrapper = this.container.appendChild(\n            document.createElement('timeline')\n        );\n        this.util.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: `${this.params.height}px`\n        });\n\n        if (wsParams.fillParent || wsParams.scrollParent) {\n            this.util.style(this.wrapper, {\n                width: '100%',\n                overflowX: 'hidden',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.wrapper.addEventListener('click', this._onWrapperClick);\n    }\n\n    /**\n     * Render the timeline (also updates the already rendered timeline)\n     *\n     */\n    render() {\n        if (!this.wrapper) {\n            this.createWrapper();\n        }\n        this.updateCanvases();\n        this.updateCanvasesPositioning();\n        this.renderCanvases();\n    }\n\n    /**\n     * Add new timeline canvas\n     *\n     */\n    addCanvas() {\n        const canvas = this.wrapper.appendChild(\n            document.createElement('canvas')\n        );\n        this.canvases.push(canvas);\n        this.util.style(canvas, {\n            position: 'absolute',\n            zIndex: 4\n        });\n    }\n\n    /**\n     * Remove timeline canvas\n     *\n     */\n    removeCanvas() {\n        const canvas = this.canvases.pop();\n        canvas.parentElement.removeChild(canvas);\n    }\n\n    /**\n     * Make sure the correct of timeline canvas elements exist and are cached in\n     * this.canvases\n     *\n     */\n    updateCanvases() {\n        const totalWidth = Math.round(this.drawer.wrapper.scrollWidth);\n        const requiredCanvases = Math.ceil(\n            totalWidth / this.maxCanvasElementWidth\n        );\n\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n    }\n\n    /**\n     * Update the dimensions and positioning style for all the timeline canvases\n     *\n     */\n    updateCanvasesPositioning() {\n        // cache length for performance\n        const canvasesLength = this.canvases.length;\n        this.canvases.forEach((canvas, i) => {\n            // canvas width is the max element width, or if it is the last the\n            // required width\n            const canvasWidth =\n                i === canvasesLength - 1\n                    ? this.drawer.wrapper.scrollWidth -\n                      this.maxCanvasElementWidth * (canvasesLength - 1)\n                    : this.maxCanvasElementWidth;\n            // set dimensions and style\n            canvas.width = canvasWidth * this.pixelRatio;\n            // on certain pixel ratios the canvas appears cut off at the bottom,\n            // therefore leave 1px extra\n            canvas.height = (this.params.height + 1) * this.pixelRatio;\n            this.util.style(canvas, {\n                width: `${canvasWidth}px`,\n                height: `${this.params.height}px`,\n                left: `${i * this.maxCanvasElementWidth}px`\n            });\n        });\n    }\n\n    /**\n     * Render the timeline labels and notches\n     *\n     */\n    renderCanvases() {\n        const duration =\n            this.params.duration ||\n            this.wavesurfer.backend.getDuration();\n\n        if (duration <= 0) {\n            return;\n        }\n        const wsParams = this.wavesurfer.params;\n        const fontSize = this.params.fontSize * wsParams.pixelRatio;\n        const totalSeconds = parseInt(duration, 10) + 1;\n        const width =\n            wsParams.fillParent && !wsParams.scrollParent\n                ? this.drawer.getWidth()\n                : this.drawer.wrapper.scrollWidth * wsParams.pixelRatio;\n        const height1 = this.params.height * this.pixelRatio;\n        const height2 =\n            this.params.height *\n            (this.params.notchPercentHeight / 100) *\n            this.pixelRatio;\n        const pixelsPerSecond = width / duration;\n\n        const formatTime = this.params.formatTimeCallback;\n        // if parameter is function, call the function with\n        // pixelsPerSecond, otherwise simply take the value as-is\n        const intervalFnOrVal = option =>\n            typeof option === 'function' ? option(pixelsPerSecond) : option;\n        const timeInterval = intervalFnOrVal(this.params.timeInterval);\n        const primaryLabelInterval = intervalFnOrVal(\n            this.params.primaryLabelInterval\n        );\n        const secondaryLabelInterval = intervalFnOrVal(\n            this.params.secondaryLabelInterval\n        );\n\n        let curPixel = pixelsPerSecond * this.params.offset;\n        let curSeconds = 0;\n        let i;\n        // build an array of position data with index, second and pixel data,\n        // this is then used multiple times below\n        const positioning = [];\n\n        // render until end in case we have a negative offset\n        const renderSeconds = (this.params.offset < 0)\n            ? totalSeconds - this.params.offset\n            : totalSeconds;\n\n        for (i = 0; i < renderSeconds / timeInterval; i++) {\n            positioning.push([i, curSeconds, curPixel]);\n            curSeconds += timeInterval;\n            curPixel += pixelsPerSecond * timeInterval;\n        }\n\n        // iterate over each position\n        const renderPositions = cb => {\n            positioning.forEach(pos => {\n                cb(pos[0], pos[1], pos[2]);\n            });\n        };\n\n        // render primary labels\n        this.setFillStyles(this.params.primaryColor);\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\n        this.setFillStyles(this.params.primaryFontColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (i % primaryLabelInterval === 0) {\n                this.fillRect(curPixel, 0, 1, height1);\n                this.fillText(\n                    formatTime(curSeconds, pixelsPerSecond),\n                    curPixel + this.params.labelPadding * this.pixelRatio,\n                    height1\n                );\n            }\n        });\n\n        // render secondary labels\n        this.setFillStyles(this.params.secondaryColor);\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\n        this.setFillStyles(this.params.secondaryFontColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (i % secondaryLabelInterval === 0) {\n                this.fillRect(curPixel, 0, 1, height1);\n                this.fillText(\n                    formatTime(curSeconds, pixelsPerSecond),\n                    curPixel + this.params.labelPadding * this.pixelRatio,\n                    height1\n                );\n            }\n        });\n\n        // render the actual notches (when no labels are used)\n        this.setFillStyles(this.params.unlabeledNotchColor);\n        renderPositions((i, curSeconds, curPixel) => {\n            if (\n                i % secondaryLabelInterval !== 0 &&\n                i % primaryLabelInterval !== 0\n            ) {\n                this.fillRect(curPixel, 0, 1, height2);\n            }\n        });\n    }\n\n    /**\n     * Set the canvas fill style\n     *\n     * @param {DOMString|CanvasGradient|CanvasPattern} fillStyle Fill style to\n     * use\n     */\n    setFillStyles(fillStyle) {\n        this.canvases.forEach(canvas => {\n            const context = canvas.getContext('2d');\n            if (context) {\n                context.fillStyle = fillStyle;\n            }\n        });\n    }\n\n    /**\n     * Set the canvas font\n     *\n     * @param {DOMString} font Font to use\n     */\n    setFonts(font) {\n        this.canvases.forEach(canvas => {\n            const context = canvas.getContext('2d');\n            if (context) {\n                context.font = font;\n            }\n        });\n    }\n\n    /**\n     * Draw a rectangle on the canvases\n     *\n     * (it figures out the offset for each canvas)\n     *\n     * @param {number} x X-position\n     * @param {number} y Y-position\n     * @param {number} width Width\n     * @param {number} height Height\n     */\n    fillRect(x, y, width, height) {\n        this.canvases.forEach((canvas, i) => {\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(x + width, i * this.maxCanvasWidth + canvas.width),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                const context = canvas\n                    .getContext('2d');\n                if (context) {\n                    context\n                        .fillRect(\n                            intersection.x1 - leftOffset,\n                            intersection.y1,\n                            intersection.x2 - intersection.x1,\n                            intersection.y2 - intersection.y1\n                        );\n                }\n            }\n        });\n    }\n\n    /**\n     * Fill a given text on the canvases\n     *\n     * @param {string} text Text to render\n     * @param {number} x X-position\n     * @param {number} y Y-position\n     */\n    fillText(text, x, y) {\n        let textWidth;\n        let xOffset = 0;\n\n        this.canvases.forEach(canvas => {\n            const context = canvas.getContext('2d');\n            if (context) {\n                const canvasWidth = context.canvas.width;\n\n                if (xOffset > x + textWidth) {\n                    return;\n                }\n\n                if (xOffset + canvasWidth > x && context) {\n                    textWidth = context.measureText(text).width;\n                    context.fillText(text, x - xOffset, y);\n                }\n\n                xOffset += canvasWidth;\n            }\n        });\n    }\n\n    /**\n     * Turn the time into a suitable label for the time.\n     *\n     * @param {number} seconds Seconds to format\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Time\n     */\n    defaultFormatTimeCallback(seconds, pxPerSec) {\n        if (seconds / 60 > 1) {\n            // calculate minutes and seconds from seconds count\n            const minutes = parseInt(seconds / 60, 10);\n            seconds = parseInt(seconds % 60, 10);\n            // fill up seconds with zeroes\n            seconds = seconds < 10 ? '0' + seconds : seconds;\n            return `${minutes}:${seconds}`;\n        }\n        return Math.round(seconds * 1000) / 1000;\n    }\n\n    /**\n     * Return how many seconds should be between each notch\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Time\n     */\n    defaultTimeInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 1;\n        } else if (pxPerSec * 5 >= 25) {\n            return 5;\n        } else if (pxPerSec * 15 >= 25) {\n            return 15;\n        }\n        return Math.ceil(0.5 / pxPerSec) * 60;\n    }\n\n    /**\n     * Return the cadence of notches that get labels in the primary color.\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Cadence\n     */\n    defaultPrimaryLabelInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 10;\n        } else if (pxPerSec * 5 >= 25) {\n            return 6;\n        } else if (pxPerSec * 15 >= 25) {\n            return 4;\n        }\n        return 4;\n    }\n\n    /**\n     * Return the cadence of notches that get labels in the secondary color.\n     *\n     * @param {number} pxPerSec Pixels per second\n     * @returns {number} Cadence\n     */\n    defaultSecondaryLabelInterval(pxPerSec) {\n        if (pxPerSec >= 25) {\n            return 5;\n        } else if (pxPerSec * 5 >= 25) {\n            return 2;\n        } else if (pxPerSec * 15 >= 25) {\n            return 2;\n        }\n        return 2;\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(171);\n"],"names":["root","factory","exports","module","define","amd","self","TimelinePlugin","params","ws","_this","_classCallCheck","_defineProperty","wrapper","drawer","scrollLeft","render","wavesurfer","pixelRatio","maxCanvasWidth","width","maxCanvasElementWidth","Math","round","addEventListener","_onScroll","on","_onRedraw","_onZoom","e","preventDefault","relX","offsetX","layerX","fireEvent","scrollWidth","this","container","document","querySelector","Error","util","Object","assign","height","notchPercentHeight","labelPadding","unlabeledNotchColor","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","fontFamily","fontSize","duration","zoomDebounce","formatTimeCallback","defaultFormatTimeCallback","timeInterval","defaultTimeInterval","primaryLabelInterval","defaultPrimaryLabelInterval","secondaryLabelInterval","defaultSecondaryLabelInterval","offset","canvases","debounce","key","value","name","deferInit","instance","isReady","_onReady","once","unAll","un","removeEventListener","parentNode","_onWrapperClick","removeChild","wsParams","innerHTML","appendChild","createElement","style","display","position","userSelect","webkitUserSelect","concat","fillParent","scrollParent","overflowX","overflowY","createWrapper","updateCanvases","updateCanvasesPositioning","renderCanvases","canvas","push","zIndex","pop","parentElement","totalWidth","requiredCanvases","ceil","length","addCanvas","removeCanvas","_this2","canvasesLength","forEach","i","canvasWidth","left","_this3","backend","getDuration","totalSeconds","parseInt","getWidth","height1","height2","pixelsPerSecond","formatTime","intervalFnOrVal","option","curPixel","curSeconds","positioning","renderSeconds","renderPositions","cb","pos","setFillStyles","setFonts","fillRect","fillText","fillStyle","context","getContext","font","x","y","_this4","leftOffset","intersection","x1","max","y1","x2","min","y2","text","textWidth","xOffset","measureText","seconds","pxPerSec","minutes","default","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}