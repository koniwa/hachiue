{"version":3,"file":"wavesurfer.regions.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./src/plugin/regions/index.js","webpack://WaveSurfer/./src/plugin/regions/region.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(self, () => {\nreturn ","/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?boolean} contentEditable=false Allow/disallow editing content of the region\n * @property {?boolean} removeButton=false adds remove region button\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        // By default, scroll the container if the user drags a region\n        // within 5% (based on its initial size) of its edge\n        const scrollWidthProportion = 0.05;\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.orientation = this.wavesurfer.drawer.orientation;\n            this.defaultEdgeScrollWidth = this.wrapper.clientWidth * scrollWidthProportion;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.vertical = this.wavesurfer.drawer.params.vertical;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        // Disabling `region-removed' because destroying the plugin calls\n        // the Region.remove() method that is also used to remove regions based\n        // on user input. This can cause confusion since teardown is not a\n        // user event, but would emit `region-removed` as if it was.\n        this.wavesurfer.setDisabledEventEmissions(['region-removed']);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) {\n            return null;\n        }\n\n        params = {\n            edgeScrollWidth: this.params.edgeScrollWidth || this.defaultEdgeScrollWidth,\n            contentEditable: this.params.contentEditable,\n            removeButton: this.params.removeButton,\n            ...params\n        };\n\n        // Take formatTimeCallback from plugin params if not already set\n        if (!params.formatTimeCallback && this.params.formatTimeCallback) {\n            params = {...params, formatTimeCallback: this.params.formatTimeCallback};\n        }\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth -\n                this.wrapper.clientWidth;\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            // set the region channel index based on the clicked area\n            if (this.wavesurfer.params.splitChannels && this.wavesurfer.params.splitChannelsOptions.splitDragSelection) {\n                const y = (e.touches ? e.touches[0].clientY : e.clientY) - wrapperRect.top;\n                const channelCount = this.wavesurfer.backend.buffer != null ? this.wavesurfer.backend.buffer.numberOfChannels : 1;\n                const channelHeight = this.wrapper.clientHeight / channelCount;\n                const channelIdx = Math.floor(y / channelHeight);\n                params.channelIdx = channelIdx;\n                const channelColors = this.wavesurfer.params.splitChannelsOptions.channelColors[channelIdx];\n                if (channelColors && channelColors.dragColor) {\n                    params.color = channelColors.dragColor;\n                }\n            }\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseleave', eventUp);\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n            this.wrapper.removeEventListener('mouseleave', eventUp);\n        });\n\n        const eventMove = event => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) {\n                    return;\n                }\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(event);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = orientedEvent.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(event);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n","/**\n *  @since 4.0.0\n *\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nexport class Region {\n    constructor(params, regionsUtils, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.regionsUtil = regionsUtils;\n        this.vertical = ws.drawer.params.vertical;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                this.start +\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        this.contentEditable = Boolean(params.contentEditable);\n        this.removeButton = Boolean(params.removeButton);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        // The left and right handleStyle properties can be set to 'none' for\n        // no styling or can be assigned an object containing CSS properties.\n        this.handleStyle = params.handleStyle || {\n            left: {},\n            right: {}\n        };\n        this.handleLeftEl = null;\n        this.handleRightEl = null;\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n        this.showTooltip = params.showTooltip ?? true;\n\n        this.maxLength = params.maxLength;\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n        // Determines whether the context menu is prevented from being opened.\n        this.preventContextMenu =\n            params.preventContextMenu === undefined\n                ? false\n                : Boolean(params.preventContextMenu);\n\n        // select channel ID to set region\n        let channelIdx =\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\n        this.channelIdx = channelIdx;\n        this.regionHeight = '100%';\n        this.marginTop = '0px';\n\n        if (channelIdx !== -1) {\n            let channelCount =\n                this.wavesurfer.backend.buffer != null\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\n                    : -1;\n            if (channelCount >= 0 && channelIdx < channelCount) {\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\n                this.marginTop =\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\n            }\n        }\n\n        this.formatTimeCallback = params.formatTimeCallback;\n        this.edgeScrollWidth = params.edgeScrollWidth;\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params, eventParams) {\n        if (params.start != null) {\n            this.start = Number(params.start);\n        }\n        if (params.end != null) {\n            this.end = Number(params.end);\n        }\n        if (params.loop != null) {\n            this.loop = Boolean(params.loop);\n        }\n        if (params.color != null) {\n            this.color = params.color;\n        }\n        if (params.handleStyle != null) {\n            this.handleStyle = params.handleStyle;\n        }\n        if (params.data != null) {\n            this.data = params.data;\n        }\n        if (params.resize != null) {\n            this.resize = Boolean(params.resize);\n            this.updateHandlesResize(this.resize);\n        }\n        if (params.drag != null) {\n            this.drag = Boolean(params.drag);\n        }\n        if (params.maxLength != null) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (params.minLength != null) {\n            this.minLength = Number(params.minLength);\n        }\n        if (params.attributes != null) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this, eventParams);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.element.remove();\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /**\n     * Play the audio region.\n     * @param {number} start Optional offset to start playing at\n     */\n    play(start) {\n        const s = start || this.start;\n        this.wavesurfer.play(s, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /**\n     * Play the audio region in a loop.\n     * @param {number} start Optional offset to start playing at\n     * */\n    playLoop(start) {\n        this.loop = true;\n        this.play(start);\n    }\n\n    /**\n     * Set looping on/off.\n     * @param {boolean} loop True if should play in loop\n     */\n    setLoop(loop) {\n        this.loop = loop;\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        this.element = this.util.withOrientation(\n            this.wrapper.appendChild(document.createElement('region')),\n            this.vertical\n        );\n\n        this.element.className = 'wavesurfer-region';\n        if (this.showTooltip) {\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n        this.element.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            this.element.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(this.element, {\n            position: 'absolute',\n            zIndex: 3,\n            height: this.regionHeight,\n            top: this.marginTop\n        });\n\n        /* Button Remove Region */\n        if (this.removeButton){\n            const removeButtonEl = document.createElement('div');\n            removeButtonEl.className = 'remove-region-button';\n            removeButtonEl.textContent = '⨯';\n            this.removeButtonEl = this.element.appendChild(removeButtonEl);\n            const css = {\n                zIndex: 4,\n                position: 'absolute',\n                bottom: 0,\n                right: '4px',\n                cursor:'pointer',\n                fontSize: '20px',\n                lineHeight: '21px',\n                color: 'grey'\n            };\n            this.style(this.removeButtonEl, css);\n        }\n\n        /* Edit content */\n        if (this.contentEditable){\n            const contentEl = document.createElement('div');\n            contentEl.className = 'region-content';\n            contentEl.contentEditable = 'true';\n            contentEl.innerText = this.data.text || '';\n            this.contentEl = this.element.appendChild(contentEl);\n            const css = {\n                zIndex: 4,\n                padding: '2px 5px',\n                cursor:'text'};\n            this.style(this.contentEl, css);\n        }\n\n        /* Resize handles */\n        if (this.resize) {\n            this.handleLeftEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n            this.handleRightEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\n\n            // Default CSS properties for both handles.\n            const css = {\n                cursor: this.vertical ? 'row-resize' : 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '2px',\n                height: '100%',\n                backgroundColor: 'rgba(0, 0, 0, 1)'\n            };\n\n            // Merge CSS properties per handle.\n            const handleLeftCss =\n                this.handleStyle.left !== 'none'\n                    ? Object.assign(\n                        { left: '0px' },\n                        css,\n                        this.handleStyle.left\n                    )\n                    : null;\n            const handleRightCss =\n                this.handleStyle.right !== 'none'\n                    ? Object.assign(\n                        { right: '0px' },\n                        css,\n                        this.handleStyle.right\n                    )\n                    : null;\n\n            if (handleLeftCss) {\n                this.style(this.handleLeftEl, handleLeftCss);\n            }\n\n            if (handleRightCss) {\n                this.style(this.handleRightEl, handleRightCss);\n            }\n        }\n\n        this.updateRender();\n        this.bindEvents();\n    }\n\n    formatTime(start, end) {\n        if (this.formatTimeCallback) {\n            return this.formatTimeCallback(start, end);\n        }\n        return (start == end ? [start] : [start, end])\n            .map((time) =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        let startLimited = this.start;\n        let endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            if (this.showTooltip) {\n                this.element.title = this.formatTime(this.start, this.end);\n            }\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = (time) => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                const realTime = this.wavesurfer.getCurrentTime();\n                if (realTime >= this.start && realTime <= this.end) {\n                    this.wavesurfer.play(this.start);\n                }\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        const preventContextMenu = this.preventContextMenu;\n\n        this.element.addEventListener('mouseenter', (e) => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', (e) => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        this.element.addEventListener('contextmenu', (e) => {\n            if (preventContextMenu) {\n                e.preventDefault();\n            }\n            this.fireEvent('contextmenu', e);\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        if (this.drag || this.resize) {\n            this.bindDragEvents();\n        }\n\n        /* Edit content */\n        if (this.contentEditable){\n            this.contentEl.addEventListener('blur', this.onContentBlur.bind(this));\n            this.contentEl.addEventListener('click', this.onContentClick.bind(this));\n        }\n        /* Remove button */\n        if (this.removeButton){\n            this.removeButtonEl.addEventListener('click', this.onRemove.bind(this));\n        }\n    }\n\n    bindDragEvents() {\n        const container = this.wavesurfer.drawer.container;\n        const scrollSpeed = this.scrollSpeed;\n        let startTime;\n        let touchId;\n        let drag;\n        let maxScroll;\n        let resize;\n        let updated = false;\n        let scrollDirection;\n        let wrapperRect;\n        let regionLeftHalfTime;\n        let regionRightHalfTime;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = (event) => {\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n            const duration = this.wavesurfer.getDuration();\n            if (!scrollDirection || (!drag && !resize)) {\n                return;\n            }\n\n            const x = orientedEvent.clientX;\n            let distanceBetweenCursorAndWrapperEdge = 0;\n            let regionHalfTimeWidth = 0;\n            let adjustment = 0;\n\n            // Get the currently selected time according to the mouse position\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // Considering the point of contact with the region while edgescrolling\n                if (scrollDirection === -1) {\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\n                } else {\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\n                }\n            } else {\n                // Considering minLength while edgescroll\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            // Don't edgescroll if region has reached min or max limit\n            const wrapperScrollLeft = this.wrapper.scrollLeft;\n\n            if (scrollDirection === -1) {\n                if (Math.round(wrapperScrollLeft) === 0) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\n                    return;\n                }\n            } else {\n                if (Math.round(wrapperScrollLeft) === maxScroll) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\n                    return;\n                }\n            }\n\n            // Update scroll position\n            let scrollLeft = wrapperScrollLeft - adjustment + scrollSpeed * scrollDirection;\n\n            if (scrollDirection === -1) {\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\n            } else {\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\n            }\n\n            const delta = time - startTime;\n            startTime = time;\n\n            // Continue dragging or resizing\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n            // Repeat\n            window.requestAnimationFrame(() => {\n                edgeScroll(event);\n            });\n        };\n\n        const onDown = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            touchId = event.targetTouches ? event.targetTouches[0].identifier : null;\n\n            // stop the event propagation, if this region is resizable or draggable\n            // and the event is therefore handled here.\n            if (this.drag || this.resize) {\n                event.stopPropagation();\n            }\n\n            // Store the selected startTime we begun dragging or resizing\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event, true) * duration\n            );\n\n            // Store the selected point of contact when we begin dragging\n            regionLeftHalfTime = startTime - this.start;\n            regionRightHalfTime = this.end - startTime;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            this.isResizing = false;\n            this.isDragging = false;\n            if (event.target.tagName.toLowerCase() === 'handle') {\n                this.isResizing = true;\n                resize = event.target.classList.contains('wavesurfer-handle-start')\n                    ? 'start'\n                    : 'end';\n            } else {\n                this.isDragging = true;\n                drag = true;\n                resize = false;\n            }\n        };\n        const onUp = (event) => {\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n\n            if (drag || resize) {\n                this.isDragging = false;\n                this.isResizing = false;\n                drag = false;\n                scrollDirection = null;\n                resize = false;\n            }\n\n            if (updated) {\n                updated = false;\n                this.util.preventClick();\n                this.fireEvent('update-end', event);\n                this.wavesurfer.fireEvent('region-update-end', this, event);\n            }\n        };\n        const onMove = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n            let delta = null;\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n            if (!drag && !resize) {\n                return;\n            }\n\n            const oldTime = startTime;\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // To maintain relative cursor start point while dragging\n                const maxEnd = this.wavesurfer.getDuration();\n                if (time > maxEnd - regionRightHalfTime) {\n                    time = maxEnd - regionRightHalfTime;\n                }\n\n                if (time - regionLeftHalfTime < 0) {\n                    time = regionLeftHalfTime;\n                }\n            }\n\n            if (resize) {\n                // To maintain relative cursor start point while resizing\n                // we have to handle for minLength\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        // Calculate the end time based on the min length of the region.\n                        time = this.start + minLength;\n                        delta = time - (this.end + (time - startTime));\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            if (!delta) {\n                delta = time - startTime;\n            }\n\n            startTime = time;\n\n            // Drag\n            if (this.drag && drag) {\n                updated = updated || !!delta;\n                this.onDrag(delta);\n            }\n\n            // Resize\n            if (this.resize && resize) {\n                updated = updated || !!delta;\n                this.onResize(delta, resize);\n            }\n\n            if (\n                this.scroll && container.clientWidth < this.wrapper.scrollWidth\n            ) {\n                // Triggering edgescroll from within edgeScrollWidth\n                let x = orientedEvent.clientX;\n\n                // Check direction\n                if (x < wrapperRect.left + this.edgeScrollWidth) {\n                    scrollDirection = -1;\n                } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n\n                if (scrollDirection) {\n                    edgeScroll(event);\n                }\n            }\n        };\n\n        this.element.addEventListener('mousedown', onDown);\n        this.element.addEventListener('touchstart', onDown);\n\n        document.body.addEventListener('mousemove', onMove);\n        document.body.addEventListener('touchmove', onMove, {passive: false});\n\n        document.addEventListener('mouseup', onUp);\n        document.body.addEventListener('touchend', onUp);\n\n        this.on('remove', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n            document.body.removeEventListener('mousemove', onMove);\n            document.body.removeEventListener('touchmove', onMove);\n        });\n\n        this.wavesurfer.on('destroy', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n        });\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd) {\n            delta = maxEnd - this.end;\n        }\n\n        if (this.start + delta < 0) {\n            delta = this.start * -1;\n        }\n\n        const eventParams = {\n            direction: this._getDragDirection(delta),\n            action: 'drag'\n        };\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        }, eventParams);\n    }\n\n    /**\n     * Returns the direction of dragging region based on delta\n     * Negative delta means region is moving to the left\n     * Positive - to the right\n     * For zero delta the direction is not defined\n     * @param {number} delta Drag offset\n     * @returns {string|null} Direction 'left', 'right' or null\n     */\n    _getDragDirection(delta) {\n        if (delta < 0) {\n            return 'left';\n        }\n        if (delta > 0) {\n            return 'right';\n        }\n        return null;\n    }\n\n    /**\n     * @example\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\n     *\n     * @param {number} delta How much to add or subtract, given in seconds\n     * @param {string} direction 'start 'or 'end'\n     */\n    onResize(delta, direction) {\n        const duration = this.wavesurfer.getDuration();\n        const eventParams = {\n            action: 'resize',\n            direction: direction === 'start' ? 'left' : 'right'\n        };\n\n        if (direction === 'start') {\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\n                delta = this.end - this.minLength - this.start;\n            }\n\n            // Check if changing the start by the given delta would result in the region being larger than maxLength\n            if (delta < 0 && this.end - (this.start + delta) > this.maxLength) {\n                delta = this.end - this.start - this.maxLength;\n            }\n\n            if (delta < 0 && (this.start + delta) < 0) {\n                delta = this.start * -1;\n            }\n\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            }, eventParams);\n        } else {\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\n                delta = this.start + this.minLength - this.end;\n            }\n\n            // Check if changing the end by the given delta would result in the region being larger than maxLength\n            if (delta > 0 && this.end + delta - this.start > this.maxLength) {\n                delta = this.maxLength - (this.end - this.start);\n            }\n\n            if (delta > 0 && (this.end + delta) > duration) {\n                delta = duration - this.end;\n            }\n\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            }, eventParams);\n        }\n    }\n\n    onContentBlur(event){\n        const {text: oldText} = this.data || {};\n        const text = event.target.innerText;\n        const data = {...this.data, text };\n        const eventParams = {action: 'contentEdited', oldText, text};\n        this.update({data}, eventParams);\n    }\n\n    onContentClick(event){\n        event.stopPropagation();\n    }\n\n    onRemove(event){\n        event.stopPropagation();\n        this.remove();\n    }\n\n    updateHandlesResize(resize) {\n        let cursorStyle;\n        if (resize) {\n            cursorStyle = this.vertical ? 'row-resize' : 'col-resize';\n        } else {\n            cursorStyle = 'auto';\n        }\n\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(23);\n"],"names":["root","factory","exports","module","define","amd","self","_region","require","_typeof","obj","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","_defineProperties","props","descriptor","arg","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","RegionsPlugin","params","ws","_this","instance","Constructor","_classCallCheck","this","wavesurfer","util","getRegionSnapToGridValue","maxRegions","regionsMinLength","getOwnPropertyNames","Observer","Region","_onBackendCreated","wrapper","drawer","orientation","defaultEdgeScrollWidth","clientWidth","regions","region","add","list","_onReady","vertical","dragSelection","enableDragSelection","id","updateRender","protoProps","staticProps","name","deferInit","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","isReady","once","un","setDisabledEventEmissions","_this2","wouldExceedMaxRegions","edgeScrollWidth","contentEditable","removeButton","formatTimeCallback","minLength","on","_this3","remove","_this4","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","withOrientation","getBoundingClientRect","splitChannels","splitChannelsOptions","splitDragSelection","y","clientY","top","channelCount","backend","buffer","numberOfChannels","channelHeight","clientHeight","channelIdx","floor","channelColors","dragColor","color","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","event","startUpdate","endUpdate","orientedEvent","x","clientX","left","right","_this5","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","default","regionsUtils","_params$showTooltip","style","regionsUtil","getId","resize","Boolean","isResizing","isDragging","loop","handleStyle","handleLeftEl","handleRightEl","data","attributes","showTooltip","maxLength","_onRedraw","preventContextMenu","parseInt","regionHeight","marginTop","getHeight","bindInOut","render","eventParams","updateHandlesResize","element","s","play","attrname","appendChild","createElement","className","title","formatTime","setAttribute","position","zIndex","height","removeButtonEl","textContent","bottom","cursor","fontSize","lineHeight","contentEl","innerText","text","padding","css","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","onContentBlur","bind","onContentClick","onRemove","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","wrapperScrollLeft","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","passive","direction","_getDragDirection","action","oldText","cursorStyle","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}