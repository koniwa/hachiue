{"version":3,"file":"wavesurfer.regions.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./src/plugin/regions/index.js","webpack://WaveSurfer/./src/plugin/regions/region.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(self, () => {\nreturn ","/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        // By default, scroll the container if the user drags a region\n        // within 5% (based on its initial size) of its edge\n        const scrollWidthProportion = 0.05;\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.orientation = this.wavesurfer.drawer.orientation;\n            this.defaultEdgeScrollWidth = this.wrapper.clientWidth * scrollWidthProportion;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            this.vertical = this.wavesurfer.drawer.params.vertical;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        // Disabling `region-removed' because destroying the plugin calls\n        // the Region.remove() method that is also used to remove regions based\n        // on user input. This can cause confusion since teardown is not a\n        // user event, but would emit `region-removed` as if it was.\n        this.wavesurfer.setDisabledEventEmissions(['region-removed']);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) {\n            return null;\n        }\n\n        params = {\n            edgeScrollWidth: this.params.edgeScrollWidth || this.defaultEdgeScrollWidth,\n            ...params\n        };\n\n        // Take formatTimeCallback from plugin params if not already set\n        if (!params.formatTimeCallback && this.params.formatTimeCallback) {\n            params = {...params, formatTimeCallback: this.params.formatTimeCallback};\n        }\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth -\n                this.wrapper.clientWidth;\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            // set the region channel index based on the clicked area\n            if (this.wavesurfer.params.splitChannels && this.wavesurfer.params.splitChannelsOptions.splitDragSelection) {\n                const y = (e.touches ? e.touches[0].clientY : e.clientY) - wrapperRect.top;\n                const channelCount = this.wavesurfer.backend.buffer != null ? this.wavesurfer.backend.buffer.numberOfChannels : 1;\n                const channelHeight = this.wrapper.clientHeight / channelCount;\n                const channelIdx = Math.floor(y / channelHeight);\n                params.channelIdx = channelIdx;\n                const channelColors = this.wavesurfer.params.splitChannelsOptions.channelColors[channelIdx];\n                if (channelColors && channelColors.dragColor) {\n                    params.color = channelColors.dragColor;\n                }\n            }\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseleave', eventUp);\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n            this.wrapper.removeEventListener('mouseleave', eventUp);\n        });\n\n        const eventMove = event => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) {\n                    return;\n                }\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(event);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = orientedEvent.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(event);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n","/**\n *  @since 4.0.0\n *\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nexport class Region {\n    constructor(params, regionsUtils, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.regionsUtil = regionsUtils;\n        this.vertical = ws.drawer.params.vertical;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                this.start +\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        // The left and right handleStyle properties can be set to 'none' for\n        // no styling or can be assigned an object containing CSS properties.\n        this.handleStyle = params.handleStyle || {\n            left: {},\n            right: {}\n        };\n        this.handleLeftEl = null;\n        this.handleRightEl = null;\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n        this.showTooltip = params.showTooltip ?? true;\n\n        this.maxLength = params.maxLength;\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n        // Determines whether the context menu is prevented from being opened.\n        this.preventContextMenu =\n            params.preventContextMenu === undefined\n                ? false\n                : Boolean(params.preventContextMenu);\n\n        // select channel ID to set region\n        let channelIdx =\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\n        this.channelIdx = channelIdx;\n        this.regionHeight = '100%';\n        this.marginTop = '0px';\n\n        if (channelIdx !== -1) {\n            let channelCount =\n                this.wavesurfer.backend.buffer != null\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\n                    : -1;\n            if (channelCount >= 0 && channelIdx < channelCount) {\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\n                this.marginTop =\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\n            }\n        }\n\n        this.formatTimeCallback = params.formatTimeCallback;\n        this.edgeScrollWidth = params.edgeScrollWidth;\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params, eventParams) {\n        if (params.start != null) {\n            this.start = Number(params.start);\n        }\n        if (params.end != null) {\n            this.end = Number(params.end);\n        }\n        if (params.loop != null) {\n            this.loop = Boolean(params.loop);\n        }\n        if (params.color != null) {\n            this.color = params.color;\n        }\n        if (params.handleStyle != null) {\n            this.handleStyle = params.handleStyle;\n        }\n        if (params.data != null) {\n            this.data = params.data;\n        }\n        if (params.resize != null) {\n            this.resize = Boolean(params.resize);\n            this.updateHandlesResize(this.resize);\n        }\n        if (params.drag != null) {\n            this.drag = Boolean(params.drag);\n        }\n        if (params.maxLength != null) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (params.minLength != null) {\n            this.minLength = Number(params.minLength);\n        }\n        if (params.attributes != null) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this, eventParams);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element.domElement);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /**\n     * Play the audio region.\n     * @param {number} start Optional offset to start playing at\n     */\n    play(start) {\n        const s = start || this.start;\n        this.wavesurfer.play(s, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /**\n     * Play the audio region in a loop.\n     * @param {number} start Optional offset to start playing at\n     * */\n    playLoop(start) {\n        this.loop = true;\n        this.play(start);\n    }\n\n    /**\n     * Set looping on/off.\n     * @param {boolean} loop True if should play in loop\n     */\n    setLoop(loop) {\n        this.loop = loop;\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        this.element = this.util.withOrientation(\n            this.wrapper.appendChild(document.createElement('region')),\n            this.vertical\n        );\n\n        this.element.className = 'wavesurfer-region';\n        if (this.showTooltip) {\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n        this.element.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            this.element.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(this.element, {\n            position: 'absolute',\n            zIndex: 3,\n            height: this.regionHeight,\n            top: this.marginTop\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            this.handleLeftEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n            this.handleRightEl = this.util.withOrientation(\n                this.element.appendChild(document.createElement('handle')),\n                this.vertical\n            );\n\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\n\n            // Default CSS properties for both handles.\n            const css = {\n                cursor: this.vertical ? 'row-resize' : 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '2px',\n                height: '100%',\n                backgroundColor: 'rgba(0, 0, 0, 1)'\n            };\n\n            // Merge CSS properties per handle.\n            const handleLeftCss =\n                this.handleStyle.left !== 'none'\n                    ? Object.assign(\n                        { left: '0px' },\n                        css,\n                        this.handleStyle.left\n                    )\n                    : null;\n            const handleRightCss =\n                this.handleStyle.right !== 'none'\n                    ? Object.assign(\n                        { right: '0px' },\n                        css,\n                        this.handleStyle.right\n                    )\n                    : null;\n\n            if (handleLeftCss) {\n                this.style(this.handleLeftEl, handleLeftCss);\n            }\n\n            if (handleRightCss) {\n                this.style(this.handleRightEl, handleRightCss);\n            }\n        }\n\n        this.updateRender();\n        this.bindEvents();\n    }\n\n    formatTime(start, end) {\n        if (this.formatTimeCallback) {\n            return this.formatTimeCallback(start, end);\n        }\n        return (start == end ? [start] : [start, end])\n            .map((time) =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        let startLimited = this.start;\n        let endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            if (this.showTooltip) {\n                this.element.title = this.formatTime(this.start, this.end);\n            }\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = (time) => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                const realTime = this.wavesurfer.getCurrentTime();\n                if (realTime >= this.start && realTime <= this.end) {\n                    this.wavesurfer.play(this.start);\n                }\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        const preventContextMenu = this.preventContextMenu;\n\n        this.element.addEventListener('mouseenter', (e) => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', (e) => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        this.element.addEventListener('contextmenu', (e) => {\n            if (preventContextMenu) {\n                e.preventDefault();\n            }\n            this.fireEvent('contextmenu', e);\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        if (this.drag || this.resize) {\n            this.bindDragEvents();\n        }\n    }\n\n    bindDragEvents() {\n        const container = this.wavesurfer.drawer.container;\n        const scrollSpeed = this.scrollSpeed;\n        const scrollThreshold = this.scrollThreshold;\n        let startTime;\n        let touchId;\n        let drag;\n        let maxScroll;\n        let resize;\n        let updated = false;\n        let scrollDirection;\n        let wrapperRect;\n        let regionLeftHalfTime;\n        let regionRightHalfTime;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = (event) => {\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n            const duration = this.wavesurfer.getDuration();\n            if (!scrollDirection || (!drag && !resize)) {\n                return;\n            }\n\n            const x = orientedEvent.clientX;\n            let distanceBetweenCursorAndWrapperEdge = 0;\n            let regionHalfTimeWidth = 0;\n            let adjustment = 0;\n\n            // Get the currently selected time according to the mouse position\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // Considering the point of contact with the region while edgescrolling\n                if (scrollDirection === -1) {\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\n                } else {\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\n                }\n            } else {\n                // Considering minLength while edgescroll\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            // Don't edgescroll if region has reached min or max limit\n            const wrapperScrollLeft = this.wrapper.scrollLeft;\n\n            if (scrollDirection === -1) {\n                if (Math.round(wrapperScrollLeft) === 0) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\n                    return;\n                }\n            } else {\n                if (Math.round(wrapperScrollLeft) === maxScroll) {\n                    return;\n                }\n\n                if (Math.round(wrapperScrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\n                    return;\n                }\n            }\n\n            // Update scroll position\n            let scrollLeft = wrapperScrollLeft - adjustment + scrollSpeed * scrollDirection;\n\n            if (scrollDirection === -1) {\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\n            } else {\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\n            }\n\n            const delta = time - startTime;\n            startTime = time;\n\n            // Continue dragging or resizing\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n            // Repeat\n            window.requestAnimationFrame(() => {\n                edgeScroll(event);\n            });\n        };\n\n        const onDown = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            touchId = event.targetTouches ? event.targetTouches[0].identifier : null;\n\n            // stop the event propagation, if this region is resizable or draggable\n            // and the event is therefore handled here.\n            if (this.drag || this.resize) {\n                event.stopPropagation();\n            }\n\n            // Store the selected startTime we begun dragging or resizing\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event, true) * duration\n            );\n\n            // Store the selected point of contact when we begin dragging\n            regionLeftHalfTime = startTime - this.start;\n            regionRightHalfTime = this.end - startTime;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n\n            wrapperRect = this.util.withOrientation(\n                this.wrapper.getBoundingClientRect(),\n                this.vertical\n            );\n\n            this.isResizing = false;\n            this.isDragging = false;\n            if (event.target.tagName.toLowerCase() === 'handle') {\n                this.isResizing = true;\n                resize = event.target.classList.contains('wavesurfer-handle-start')\n                    ? 'start'\n                    : 'end';\n            } else {\n                this.isDragging = true;\n                drag = true;\n                resize = false;\n            }\n        };\n        const onUp = (event) => {\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n\n            if (drag || resize) {\n                this.isDragging = false;\n                this.isResizing = false;\n                drag = false;\n                scrollDirection = null;\n                resize = false;\n            }\n\n            if (updated) {\n                updated = false;\n                this.util.preventClick();\n                this.fireEvent('update-end', event);\n                this.wavesurfer.fireEvent('region-update-end', this, event);\n            }\n        };\n        const onMove = (event) => {\n            const duration = this.wavesurfer.getDuration();\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\n\n            if (event.touches && event.touches.length > 1) {\n                return;\n            }\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\n                return;\n            }\n            if (!drag && !resize) {\n                return;\n            }\n\n            const oldTime = startTime;\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(event) * duration\n            );\n\n            if (drag) {\n                // To maintain relative cursor start point while dragging\n                const maxEnd = this.wavesurfer.getDuration();\n                if (time > maxEnd - regionRightHalfTime) {\n                    time = maxEnd - regionRightHalfTime;\n                }\n\n                if (time - regionLeftHalfTime < 0) {\n                    time = regionLeftHalfTime;\n                }\n            }\n\n            if (resize) {\n                // To maintain relative cursor start point while resizing\n                // we have to handle for minLength\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            let delta = time - startTime;\n            startTime = time;\n\n            // Drag\n            if (this.drag && drag) {\n                updated = updated || !!delta;\n                this.onDrag(delta);\n            }\n\n            // Resize\n            if (this.resize && resize) {\n                updated = updated || !!delta;\n                this.onResize(delta, resize);\n            }\n\n            if (\n                this.scroll && container.clientWidth < this.wrapper.scrollWidth\n            ) {\n                // Triggering edgescroll from within edgeScrollWidth\n                let x = orientedEvent.clientX;\n\n                // Check direction\n                if (x < wrapperRect.left + this.edgeScrollWidth) {\n                    scrollDirection = -1;\n                } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n\n                if (scrollDirection) {\n                    edgeScroll(event);\n                }\n            }\n        };\n\n        this.element.addEventListener('mousedown', onDown);\n        this.element.addEventListener('touchstart', onDown);\n\n        document.body.addEventListener('mousemove', onMove);\n        document.body.addEventListener('touchmove', onMove, {passive: false});\n\n        document.addEventListener('mouseup', onUp);\n        document.body.addEventListener('touchend', onUp);\n\n        this.on('remove', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n            document.body.removeEventListener('mousemove', onMove);\n            document.body.removeEventListener('touchmove', onMove);\n        });\n\n        this.wavesurfer.on('destroy', () => {\n            document.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n        });\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd) {\n            delta = maxEnd - this.end;\n        }\n\n        if (this.start + delta < 0) {\n            delta = this.start * -1;\n        }\n\n        const eventParams = {\n            direction: this._getDragDirection(delta),\n            action: 'drag'\n        };\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        }, eventParams);\n    }\n\n    /**\n     * Returns the direction of dragging region based on delta\n     * Negative delta means region is moving to the left\n     * Positive - to the right\n     * For zero delta the direction is not defined\n     * @param {number} delta Drag offset\n     * @returns {string|null} Direction 'left', 'right' or null\n     */\n    _getDragDirection(delta) {\n        if (delta < 0) {\n            return 'left';\n        }\n        if (delta > 0) {\n            return 'right';\n        }\n        return null;\n    }\n\n    /**\n     * @example\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\n     *\n     * @param {number} delta How much to add or subtract, given in seconds\n     * @param {string} direction 'start 'or 'end'\n     */\n    onResize(delta, direction) {\n        const duration = this.wavesurfer.getDuration();\n        const eventParams = {\n            action: 'resize',\n            direction: direction === 'start' ? 'left' : 'right'\n        };\n\n        if (direction === 'start') {\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\n                delta = this.end - this.minLength - this.start;\n            }\n\n            // Check if changing the start by the given delta would result in the region being larger than maxLength\n            if (delta < 0 && this.end - (this.start + delta) > this.maxLength) {\n                delta = this.end - this.start - this.maxLength;\n            }\n\n            if (delta < 0 && (this.start + delta) < 0) {\n                delta = this.start * -1;\n            }\n\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            }, eventParams);\n        } else {\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\n                delta = this.start + this.minLength - this.end;\n            }\n\n            // Check if changing the end by the given delta would result in the region being larger than maxLength\n            if (delta > 0 && this.end + delta - this.start > this.maxLength) {\n                delta = this.maxLength - (this.end - this.start);\n            }\n\n            if (delta > 0 && (this.end + delta) > duration) {\n                delta = duration - this.end;\n            }\n\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            }, eventParams);\n        }\n    }\n\n    updateHandlesResize(resize) {\n        let cursorStyle;\n        if (resize) {\n            cursorStyle = this.vertical ? 'row-resize' : 'col-resize';\n        } else {\n            cursorStyle = 'auto';\n        }\n\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(23);\n"],"names":["root","factory","exports","module","define","amd","self","RegionsPlugin","params","ws","this","wavesurfer","util","getRegionSnapToGridValue","value","maxRegions","regionsMinLength","Object","getOwnPropertyNames","Observer","prototype","forEach","key","Region","_onBackendCreated","wrapper","drawer","orientation","defaultEdgeScrollWidth","clientWidth","regions","region","add","list","_onReady","vertical","dragSelection","enableDragSelection","keys","id","updateRender","name","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","once","un","setDisabledEventEmissions","length","wouldExceedMaxRegions","edgeScrollWidth","formatTimeCallback","minLength","on","remove","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","withOrientation","getBoundingClientRect","splitChannels","splitChannelsOptions","splitDragSelection","y","clientY","top","channelCount","backend","buffer","numberOfChannels","channelHeight","clientHeight","channelIdx","floor","channelColors","dragColor","color","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","event","startUpdate","endUpdate","orientedEvent","x","clientX","left","right","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","regionsUtils","style","regionsUtil","getId","Number","resize","undefined","Boolean","isResizing","isDragging","loop","handleStyle","handleLeftEl","handleRightEl","data","attributes","showTooltip","maxLength","_onRedraw","preventContextMenu","parseInt","regionHeight","marginTop","getHeight","bindInOut","render","eventParams","updateHandlesResize","element","removeChild","domElement","s","play","attrname","appendChild","createElement","className","title","formatTime","setAttribute","position","zIndex","height","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","wrapperScrollLeft","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","target","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","passive","direction","_getDragDirection","action","cursorStyle","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}