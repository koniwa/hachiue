{"version":3,"file":"wavesurfer.min.js","mappings":"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","sources":["webpack://WaveSurfer/webpack/universalModuleDefinition","webpack://WaveSurfer/./src/drawer.canvasentry.js","webpack://WaveSurfer/./src/drawer.js","webpack://WaveSurfer/./src/drawer.multicanvas.js","webpack://WaveSurfer/./src/mediaelement-webaudio.js","webpack://WaveSurfer/./src/mediaelement.js","webpack://WaveSurfer/./src/peakcache.js","webpack://WaveSurfer/./src/util/absMax.js","webpack://WaveSurfer/./src/util/clamp.js","webpack://WaveSurfer/./src/util/fetch.js","webpack://WaveSurfer/./src/util/frame.js","webpack://WaveSurfer/./src/util/get-id.js","webpack://WaveSurfer/./src/util/index.js","webpack://WaveSurfer/./src/util/max.js","webpack://WaveSurfer/./src/util/min.js","webpack://WaveSurfer/./src/util/observer.js","webpack://WaveSurfer/./src/util/orientation.js","webpack://WaveSurfer/./src/util/prevent-click.js","webpack://WaveSurfer/./src/util/request-animation-frame.js","webpack://WaveSurfer/./src/util/silence-mode.js","webpack://WaveSurfer/./src/util/style.js","webpack://WaveSurfer/./src/wavesurfer.js","webpack://WaveSurfer/./src/webaudio.js","webpack://WaveSurfer/./node_modules/debounce/index.js","webpack://WaveSurfer/webpack/bootstrap","webpack://WaveSurfer/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = factory();\n})(self, () => {\nreturn ","/**\n * @since 3.0.0\n */\n\nimport style from './util/style';\nimport getId from './util/get-id';\n\n/**\n * The `CanvasEntry` class represents an element consisting of a wave `canvas`\n * and an (optional) progress wave `canvas`.\n *\n * The `MultiCanvas` renderer uses one or more `CanvasEntry` instances to\n * render a waveform, depending on the zoom level.\n */\nexport default class CanvasEntry {\n    constructor() {\n        /**\n         * The wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.wave = null;\n        /**\n         * The wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.waveCtx = null;\n        /**\n         * The (optional) progress wave node\n         *\n         * @type {HTMLCanvasElement}\n         */\n        this.progress = null;\n        /**\n         * The (optional) progress wave canvas rendering context\n         *\n         * @type {CanvasRenderingContext2D}\n         */\n        this.progressCtx = null;\n        /**\n         * Start of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.start = 0;\n        /**\n         * End of the area the canvas should render, between 0 and 1\n         *\n         * @type {number}\n         */\n        this.end = 1;\n        /**\n         * Unique identifier for this entry\n         *\n         * @type {string}\n         */\n        this.id = getId(\n            typeof this.constructor.name !== 'undefined'\n                ? this.constructor.name.toLowerCase() + '_'\n                : 'canvasentry_'\n        );\n        /**\n         * Canvas 2d context attributes\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = {};\n        /**\n         * The Timeout id used to track this canvas entry.\n         */\n        this.drawTimeout = null;\n\n    }\n\n    /**\n     * Store the wave canvas element and create the 2D rendering context\n     *\n     * @param {HTMLCanvasElement} element The wave `canvas` element.\n     */\n    initWave(element) {\n        this.wave = element;\n        this.waveCtx = this.wave.getContext('2d', this.canvasContextAttributes);\n    }\n\n    /**\n     * Store the progress wave canvas element and create the 2D rendering\n     * context\n     *\n     * @param {HTMLCanvasElement} element The progress wave `canvas` element.\n     */\n    initProgress(element) {\n        this.progress = element;\n        this.progressCtx = this.progress.getContext(\n            '2d',\n            this.canvasContextAttributes\n        );\n    }\n\n    /**\n     * Update the dimensions\n     *\n     * @param {number} elementWidth Width of the entry\n     * @param {number} totalWidth Total width of the multi canvas renderer\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(elementWidth, totalWidth, width, height) {\n        // where the canvas starts and ends in the waveform, represented as a\n        // decimal between 0 and 1\n        this.start = this.wave.offsetLeft / totalWidth || 0;\n        this.end = this.start + elementWidth / totalWidth;\n\n        // set wave canvas dimensions\n        this.wave.width = width;\n        this.wave.height = height;\n        let elementSize = { width: elementWidth + 'px' };\n        style(this.wave, elementSize);\n\n        if (this.hasProgressCanvas) {\n            // set progress canvas dimensions\n            this.progress.width = width;\n            this.progress.height = height;\n            style(this.progress, elementSize);\n        }\n    }\n\n    /**\n     * Clear the wave and progress rendering contexts\n     */\n    clearWave() {\n        // wave\n        this.waveCtx.save();\n        this.waveCtx.setTransform(1, 0, 0, 1, 0, 0);\n        this.waveCtx.clearRect(\n            0,\n            0,\n            this.waveCtx.canvas.width,\n            this.waveCtx.canvas.height\n        );\n        this.waveCtx.restore();\n\n        // progress\n        if (this.hasProgressCanvas) {\n            this.progressCtx.save();\n            this.progressCtx.setTransform(1, 0, 0, 1, 0, 0);\n            this.progressCtx.clearRect(\n                0,\n                0,\n                this.progressCtx.canvas.width,\n                this.progressCtx.canvas.height\n            );\n            this.progressCtx.restore();\n        }\n    }\n\n    /**\n     * Set the fill styles for wave and progress\n     * @param {string|string[]} waveColor Fill color for the wave canvas,\n     * or an array of colors to apply as a gradient\n     * @param {?string|string[]} progressColor Fill color for the progress canvas,\n     * or an array of colors to apply as a gradient\n     */\n    setFillStyles(waveColor, progressColor) {\n        this.waveCtx.fillStyle = this.getFillStyle(this.waveCtx, waveColor);\n\n        if (this.hasProgressCanvas) {\n            this.progressCtx.fillStyle = this.getFillStyle(this.progressCtx, progressColor);\n        }\n    }\n\n    /**\n     * Utility function to handle wave color arguments\n     *\n     * When the color argument type is a string or CanvasGradient instance,\n     * it will be returned as is. Otherwise, it will be treated as an array,\n     * and a new CanvasGradient will be returned\n     *\n     * @since 6.0.0\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {string|string[]|CanvasGradient} color Either a single fill color\n     *     for the wave canvas, an existing CanvasGradient instance, or an array\n     *     of colors to apply as a gradient\n     * @returns {string|CanvasGradient} Returns a string fillstyle value, or a\n     *     canvas gradient\n     */\n    getFillStyle(ctx, color) {\n        if (typeof color == 'string' || color instanceof CanvasGradient) {\n            return color;\n        }\n\n        const waveGradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);\n        color.forEach((value, index) => waveGradient.addColorStop((index / color.length), value));\n\n        return waveGradient;\n    }\n\n    /**\n     * Set the canvas transforms for wave and progress\n     *\n     * @param {boolean} vertical Whether to render vertically\n     */\n    applyCanvasTransforms(vertical) {\n        if (vertical) {\n            // Reflect the waveform across the line y = -x\n            this.waveCtx.setTransform(0, 1, 1, 0, 0, 0);\n\n            if (this.hasProgressCanvas) {\n                this.progressCtx.setTransform(0, 1, 1, 0, 0, 0);\n            }\n        }\n    }\n\n    /**\n     * Draw a rectangle for wave and progress\n     *\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRects(x, y, width, height, radius) {\n        this.fillRectToContext(this.waveCtx, x, y, width, height, radius);\n\n        if (this.hasProgressCanvas) {\n            this.fillRectToContext(\n                this.progressCtx,\n                x,\n                y,\n                width,\n                height,\n                radius\n            );\n        }\n    }\n\n    /**\n     * Draw the actual rectangle on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number} x X start position\n     * @param {number} y Y start position\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     */\n    fillRectToContext(ctx, x, y, width, height, radius) {\n        if (!ctx) {\n            return;\n        }\n\n        if (radius) {\n            this.drawRoundedRect(ctx, x, y, width, height, radius);\n        } else {\n            ctx.fillRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Draw a rounded rectangle on Canvas\n     *\n     * @param {CanvasRenderingContext2D} ctx Canvas context\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     *\n     * @return {void}\n     * @example drawRoundedRect(ctx, 50, 50, 5, 10, 3)\n     */\n    drawRoundedRect(ctx, x, y, width, height, radius) {\n        if (height === 0) {\n            return;\n        }\n        // peaks are float values from -1 to 1. Use absolute height values in\n        // order to correctly calculate rounded rectangle coordinates\n        if (height < 0) {\n            height *= -1;\n            y -= height;\n        }\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(\n            x + width,\n            y + height,\n            x + width - radius,\n            y + height\n        );\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Render the actual wave and progress lines\n     *\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLines(peaks, absmax, halfH, offsetY, start, end) {\n        this.drawLineToContext(\n            this.waveCtx,\n            peaks,\n            absmax,\n            halfH,\n            offsetY,\n            start,\n            end\n        );\n\n        if (this.hasProgressCanvas) {\n            this.drawLineToContext(\n                this.progressCtx,\n                peaks,\n                absmax,\n                halfH,\n                offsetY,\n                start,\n                end\n            );\n        }\n    }\n\n    /**\n     * Render the actual waveform line on a `canvas` element\n     *\n     * @param {CanvasRenderingContext2D} ctx Rendering context of target canvas\n     * @param {number[]} peaks Array with peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     */\n    drawLineToContext(ctx, peaks, absmax, halfH, offsetY, start, end) {\n        if (!ctx) {\n            return;\n        }\n\n        const length = peaks.length / 2;\n        const first = Math.round(length * this.start);\n\n        // use one more peak value to make sure we join peaks at ends -- unless,\n        // of course, this is the last canvas\n        const last = Math.round(length * this.end) + 1;\n\n        const canvasStart = first;\n        const canvasEnd = last;\n        const scale = this.wave.width / (canvasEnd - canvasStart - 1);\n\n        // optimization\n        const halfOffset = halfH + offsetY;\n        const absmaxHalf = absmax / halfH;\n\n        ctx.beginPath();\n        ctx.moveTo((canvasStart - first) * scale, halfOffset);\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset - Math.round((peaks[2 * canvasStart] || 0) / absmaxHalf)\n        );\n\n        let i, peak, h;\n        for (i = canvasStart; i < canvasEnd; i++) {\n            peak = peaks[2 * i] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((i - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        // draw the bottom edge going backwards, to make a single\n        // closed hull to fill\n        let j = canvasEnd - 1;\n        for (j; j >= canvasStart; j--) {\n            peak = peaks[2 * j + 1] || 0;\n            h = Math.round(peak / absmaxHalf);\n            ctx.lineTo((j - first) * scale + this.halfPixel, halfOffset - h);\n        }\n\n        ctx.lineTo(\n            (canvasStart - first) * scale,\n            halfOffset -\n            Math.round((peaks[2 * canvasStart + 1] || 0) / absmaxHalf)\n        );\n\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    /**\n     * Destroys this entry\n     */\n    destroy() {\n        this.waveCtx = null;\n        this.wave = null;\n\n        this.progressCtx = null;\n        this.progress = null;\n    }\n\n    /**\n     * Return image data of the wave `canvas` element\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise` that\n     * resolves with a `Blob` instance.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|Promise} When using the default `'dataURL'` `type` this\n     * returns a data URL. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with a `Blob` instance.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return new Promise(resolve => {\n                this.wave.toBlob(resolve, format, quality);\n            });\n        } else if (type === 'dataURL') {\n            return this.wave.toDataURL(format, quality);\n        }\n    }\n\n    /**\n     * Stretches existing canvas\n     * @param {Number} newTotalWidth total width of wave in pixels\n     */\n    stretchCanvas(newTotalWidth) {\n        //Calculate the start and width of this canvas\n        let start = Math.round(this.start * newTotalWidth);\n        let width = Math.round(this.end * newTotalWidth - start);\n\n        //Stretch canvas\n        let elementSize = { width: width + 'px' };\n        let elementStart = {left: start + 'px'};\n        style(this.wave, elementSize);\n        style(this.wave, elementStart);\n        if (this.hasProgressCanvas) {\n            style(this.progress, elementSize);\n            style(this.progress, elementStart);\n        }\n    }\n\n    /**\n     * Set the left offset of the canvas\n     * @param {Number} position in px for the canvas to start\n     */\n    setLeft(position) {\n        let elementStart = {left: position + 'px'};\n        style(this.wave, elementStart);\n        if (this.hasProgressCanvas) {\n            style(this.progress, elementStart);\n        }\n    }\n}\n","import * as util from './util';\n\n/**\n * Parent class for renderers\n *\n * @extends {Observer}\n */\nexport default class Drawer extends util.Observer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super();\n\n        this.container = util.withOrientation(container, params.vertical);\n        /**\n         * @type {WavesurferParams}\n         */\n        this.params = params;\n        /**\n         * The width of the renderer\n         * @type {number}\n         */\n        this.width = 0;\n        /**\n         * The height of the renderer\n         * @type {number}\n         */\n        this.height = params.height * this.params.pixelRatio;\n\n        this.lastPos = 0;\n        /**\n         * The `<wave>` element which is added to the container\n         * @type {HTMLElement}\n         */\n        this.wrapper = null;\n    }\n\n    /**\n     * Alias of `util.style`\n     *\n     * @param {HTMLElement} el The element that the styles will be applied to\n     * @param {Object} styles The map of propName: attribute, both are used as-is\n     * @return {HTMLElement} el\n     */\n    style(el, styles) {\n        return util.style(el, styles);\n    }\n\n    /**\n     * Create the wrapper `<wave>` element, style it and set up the events for\n     * interaction\n     */\n    createWrapper() {\n        this.wrapper = util.withOrientation(\n            this.container.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n\n        this.style(this.wrapper, {\n            display: 'block',\n            position: 'relative',\n            userSelect: 'none',\n            webkitUserSelect: 'none',\n            height: this.params.height + 'px'\n        });\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: '100%',\n                cursor: this.params.hideCursor ? 'none' : 'auto',\n                overflowX: this.params.hideScrollbar ? 'hidden' : 'auto',\n                overflowY: 'hidden'\n            });\n        }\n\n        this.setupWrapperEvents();\n    }\n\n    /**\n     * Handle click event\n     *\n     * @param {Event} e Click event\n     * @param {?boolean} noPrevent Set to true to not call `e.preventDefault()`\n     * @return {number} Playback position from 0 to 1\n     */\n    handleEvent(e, noPrevent) {\n        !noPrevent && e.preventDefault();\n\n        const clientX = util.withOrientation(\n            e.targetTouches ? e.targetTouches[0] : e,\n            this.params.vertical\n        ).clientX;\n        const bbox = this.wrapper.getBoundingClientRect();\n\n        const nominalWidth = this.width;\n        const parentWidth = this.getWidth();\n        const progressPixels = this.getProgressPixels(bbox, clientX);\n\n        let progress;\n        if (!this.params.fillParent && nominalWidth < parentWidth) {\n            progress = progressPixels *\n                (this.params.pixelRatio / nominalWidth) || 0;\n        } else {\n            progress = (progressPixels + this.wrapper.scrollLeft) /\n                this.wrapper.scrollWidth || 0;\n        }\n\n        return util.clamp(progress, 0, 1);\n    }\n\n    getProgressPixels(wrapperBbox, clientX) {\n        if (this.params.rtl) {\n            return wrapperBbox.right - clientX;\n        } else {\n            return clientX - wrapperBbox.left;\n        }\n    }\n\n    setupWrapperEvents() {\n        this.wrapper.addEventListener('click', e => {\n            const orientedEvent = util.withOrientation(e, this.params.vertical);\n            const scrollbarHeight = this.wrapper.offsetHeight -\n                  this.wrapper.clientHeight;\n\n            if (scrollbarHeight !== 0) {\n                // scrollbar is visible.  Check if click was on it\n                const bbox = this.wrapper.getBoundingClientRect();\n                if (orientedEvent.clientY >= bbox.bottom - scrollbarHeight) {\n                    // ignore mousedown as it was on the scrollbar\n                    return;\n                }\n            }\n\n            if (this.params.interact) {\n                this.fireEvent('click', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('dblclick', e => {\n            if (this.params.interact) {\n                this.fireEvent('dblclick', e, this.handleEvent(e));\n            }\n        });\n\n        this.wrapper.addEventListener('scroll', e =>\n            this.fireEvent('scroll', e)\n        );\n    }\n\n    /**\n     * Draw peaks on the canvas\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} length The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawPeaks(peaks, length, start, end) {\n        if (!this.setWidth(length)) {\n            this.clearWave();\n        }\n\n        this.params.barWidth\n            ? this.drawBars(peaks, 0, start, end)\n            : this.drawWave(peaks, 0, start, end);\n    }\n\n    /**\n     * Scroll to the beginning\n     */\n    resetScroll() {\n        if (this.wrapper !== null) {\n            this.wrapper.scrollLeft = 0;\n        }\n    }\n\n    /**\n     * Recenter the view-port at a certain percent of the waveform\n     *\n     * @param {number} percent Value from 0 to 1 on the waveform\n     */\n    recenter(percent) {\n        const position = this.wrapper.scrollWidth * percent;\n        this.recenterOnPosition(position, true);\n    }\n\n    /**\n     * Recenter the view-port on a position, either scroll there immediately or\n     * in steps of 5 pixels\n     *\n     * @param {number} position X-offset in pixels\n     * @param {boolean} immediate Set to true to immediately scroll somewhere\n     */\n    recenterOnPosition(position, immediate) {\n        const scrollLeft = this.wrapper.scrollLeft;\n        const half = ~~(this.wrapper.clientWidth / 2);\n        const maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n        let target = position - half;\n        let offset = target - scrollLeft;\n\n        if (maxScroll == 0) {\n            // no need to continue if scrollbar is not there\n            return;\n        }\n\n        // if the cursor is currently visible...\n        if (!immediate && -half <= offset && offset < half) {\n            // set rate at which waveform is centered\n            let rate = this.params.autoCenterRate;\n\n            // make rate depend on width of view and length of waveform\n            rate /= half;\n            rate *= maxScroll;\n\n            offset = Math.max(-rate, Math.min(rate, offset));\n            target = scrollLeft + offset;\n        }\n\n        // limit target to valid range (0 to maxScroll)\n        target = Math.max(0, Math.min(maxScroll, target));\n        // no use attempting to scroll if we're not moving\n        if (target != scrollLeft) {\n            this.wrapper.scrollLeft = target;\n        }\n    }\n\n    /**\n     * Get the current scroll position in pixels\n     *\n     * @return {number} Horizontal scroll position in pixels\n     */\n    getScrollX() {\n        let x = 0;\n        if (this.wrapper) {\n            const pixelRatio = this.params.pixelRatio;\n            x = Math.round(this.wrapper.scrollLeft * pixelRatio);\n\n            // In cases of elastic scroll (safari with mouse wheel) you can\n            // scroll beyond the limits of the container\n            // Calculate and floor the scrollable extent to make sure an out\n            // of bounds value is not returned\n            // Ticket #1312\n            if (this.params.scrollParent) {\n                const maxScroll = ~~(\n                    this.wrapper.scrollWidth * pixelRatio -\n                    this.getWidth()\n                );\n                x = Math.min(maxScroll, Math.max(0, x));\n            }\n        }\n        return x;\n    }\n\n    /**\n     * Get the width of the container\n     *\n     * @return {number} The width of the container\n     */\n    getWidth() {\n        return Math.round(this.container.clientWidth * this.params.pixelRatio);\n    }\n\n    /**\n     * Set the width of the container\n     *\n     * @param {number} width The new width of the container\n     * @return {boolean} Whether the width of the container was updated or not\n     */\n    setWidth(width) {\n        this.width = width;\n\n        if (this.params.fillParent || this.params.scrollParent) {\n            this.style(this.wrapper, {\n                width: ''\n            });\n        } else {\n            const newWidth = ~~(this.width / this.params.pixelRatio) + 'px';\n            this.style(this.wrapper, {\n                width: newWidth\n            });\n        }\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Set the height of the container\n     *\n     * @param {number} height The new height of the container.\n     * @return {boolean} Whether the height of the container was updated or not\n     */\n    setHeight(height) {\n        if (height == this.height) {\n            return false;\n        }\n        this.height = height;\n\n        this.style(this.wrapper, {\n            height: ~~(this.height / this.params.pixelRatio) + 'px'\n        });\n\n        this.updateSize();\n        return true;\n    }\n\n    /**\n     * Called by wavesurfer when progress should be rendered\n     *\n     * @param {number} progress From 0 to 1\n     */\n    progress(progress) {\n        const minPxDelta = 1 / this.params.pixelRatio;\n        const pos = Math.round(progress * this.width) * minPxDelta;\n\n        if (pos < this.lastPos || pos - this.lastPos >= minPxDelta) {\n            this.lastPos = pos;\n\n            if (this.params.scrollParent && this.params.autoCenter) {\n                const newPos = ~~(this.wrapper.scrollWidth * progress);\n                this.recenterOnPosition(\n                    newPos,\n                    this.params.autoCenterImmediately\n                );\n            }\n\n            this.updateProgress(pos);\n        }\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        this.unAll();\n        if (this.wrapper) {\n            if (this.wrapper.parentNode == this.container.domElement) {\n                this.container.removeChild(this.wrapper.domElement);\n            }\n            this.wrapper = null;\n        }\n    }\n\n    /* Renderer-specific methods */\n\n    /**\n     * Called after cursor related params have changed.\n     *\n     * @abstract\n     */\n    updateCursor() {}\n\n    /**\n     * Called when the size of the container changes so the renderer can adjust\n     *\n     * @abstract\n     */\n    updateSize() {}\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawBars(peaks, channelIndex, start, end) {}\n\n    /**\n     * Draw a waveform\n     *\n     * @abstract\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for split channel\n     * rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    drawWave(peaks, channelIndex, start, end) {}\n\n    /**\n     * Clear the waveform\n     *\n     * @abstract\n     */\n    clearWave() {}\n\n    /**\n     * Render the new progress\n     *\n     * @abstract\n     * @param {number} position X-Offset of progress position in pixels\n     */\n    updateProgress(position) {}\n}\n","import Drawer from './drawer';\nimport * as util from './util';\nimport CanvasEntry from './drawer.canvasentry';\n\n/**\n * MultiCanvas renderer for wavesurfer. Is currently the default and sole\n * builtin renderer.\n *\n * A `MultiCanvas` consists of one or more `CanvasEntry` instances, depending\n * on the zoom level.\n */\nexport default class MultiCanvas extends Drawer {\n    /**\n     * @param {HTMLElement} container The container node of the wavesurfer instance\n     * @param {WavesurferParams} params The wavesurfer initialisation options\n     */\n    constructor(container, params) {\n        super(container, params);\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasWidth = params.maxCanvasWidth;\n\n        /**\n         * @type {number}\n         */\n        this.maxCanvasElementWidth = Math.round(\n            params.maxCanvasWidth / params.pixelRatio\n        );\n\n        /**\n         * Whether or not the progress wave is rendered. If the `waveColor`\n         * and `progressColor` are the same color it is not.\n         *\n         * @type {boolean}\n         */\n        this.hasProgressCanvas = params.waveColor != params.progressColor;\n\n        /**\n         * @type {number}\n         */\n        this.halfPixel = 0.5 / params.pixelRatio;\n\n        /**\n         * List of `CanvasEntry` instances.\n         *\n         * @type {Array}\n         */\n        this.canvases = [];\n\n        /**\n         * @type {HTMLElement}\n         */\n        this.progressWave = null;\n\n        /**\n         * Class used to generate entries.\n         *\n         * @type {function}\n         */\n        this.EntryClass = CanvasEntry;\n\n        /**\n         * Canvas 2d context attributes.\n         *\n         * @type {object}\n         */\n        this.canvasContextAttributes = params.drawingContextAttributes;\n\n        /**\n         * Overlap added between entries to prevent vertical white stripes\n         * between `canvas` elements.\n         *\n         * @type {number}\n         */\n        this.overlap = 2 * Math.ceil(params.pixelRatio / 2);\n\n        /**\n         * The radius of the wave bars. Makes bars rounded\n         *\n         * @type {number}\n         */\n        this.barRadius = params.barRadius || 0;\n\n        /**\n         * Whether to render the waveform vertically. Defaults to false.\n         *\n         * @type {boolean}\n         */\n        this.vertical = params.vertical;\n\n        /**\n         * Whether to use the optimsized zoom rendering\n         * Automatically toggles to true if stretchCanvases() function is called\n         *\n         * @type {boolean}\n         */\n        this.optimiseZoom = false;\n    }\n\n    /**\n     * Initialize the drawer\n     */\n    init() {\n        this.createWrapper();\n        this.createElements();\n    }\n\n    /**\n     * Create the canvas elements and style them\n     *\n     */\n    createElements() {\n        this.progressWave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('wave')),\n            this.params.vertical\n        );\n        this.style(this.progressWave, {\n            position: 'absolute',\n            zIndex: 3,\n            left: 0,\n            top: 0,\n            bottom: 0,\n            overflow: 'hidden',\n            width: '0',\n            display: 'none',\n            boxSizing: 'border-box',\n            borderRightStyle: 'solid',\n            pointerEvents: 'none'\n        });\n\n        this.addCanvas();\n        this.updateCursor();\n    }\n\n    /**\n     * Update cursor style\n     */\n    updateCursor() {\n        this.style(this.progressWave, {\n            borderRightWidth: this.params.cursorWidth + 'px',\n            borderRightColor: this.params.cursorColor\n        });\n    }\n\n    /**\n     * Adjust to the updated size by adding or removing canvases\n     */\n    updateSize() {\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n        const requiredCanvases = Math.ceil(\n            totalWidth / (this.maxCanvasElementWidth + this.overlap)\n        );\n\n        // add required canvases\n        while (this.canvases.length < requiredCanvases) {\n            this.addCanvas();\n        }\n\n        // remove older existing canvases, if any\n        while (this.canvases.length > requiredCanvases) {\n            this.removeCanvas();\n        }\n\n        let canvasWidth = this.maxCanvasWidth + this.overlap;\n        const lastCanvas = this.canvases.length - 1;\n        let leftOffset = 0;\n        this.canvases.forEach((entry, i) => {\n            if (i == lastCanvas) {\n                canvasWidth = this.width - this.maxCanvasWidth * lastCanvas;\n            }\n\n            //Set left offset and add to next entry\n            entry.setLeft(leftOffset);\n            leftOffset += canvasWidth / this.params.pixelRatio;\n\n            this.updateDimensions(entry, canvasWidth, this.height);\n\n            entry.clearWave();\n        });\n    }\n\n    /**\n     * Add a canvas to the canvas list\n     *\n     */\n    addCanvas() {\n        const entry = new this.EntryClass();\n        entry.canvasContextAttributes = this.canvasContextAttributes;\n        entry.hasProgressCanvas = this.hasProgressCanvas;\n        entry.halfPixel = this.halfPixel;\n        const leftOffset = this.maxCanvasElementWidth * this.canvases.length;\n\n        // wave\n        let wave = util.withOrientation(\n            this.wrapper.appendChild(document.createElement('canvas')),\n            this.params.vertical\n        );\n        this.style(wave, {\n            position: 'absolute',\n            zIndex: 2,\n            left: leftOffset + 'px',\n            top: 0,\n            bottom: 0,\n            height: '100%',\n            pointerEvents: 'none'\n        });\n        entry.initWave(wave);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            let progress = util.withOrientation(\n                this.progressWave.appendChild(document.createElement('canvas')),\n                this.params.vertical\n            );\n            this.style(progress, {\n                position: 'absolute',\n                left: leftOffset + 'px',\n                top: 0,\n                bottom: 0,\n                height: '100%'\n            });\n            entry.initProgress(progress);\n        }\n\n        this.canvases.push(entry);\n    }\n\n    /**\n     * Pop single canvas from the list\n     *\n     */\n    removeCanvas() {\n        let lastEntry = this.canvases[this.canvases.length - 1];\n\n        // wave\n        lastEntry.wave.parentElement.removeChild(lastEntry.wave.domElement);\n\n        // progress\n        if (this.hasProgressCanvas) {\n            lastEntry.progress.parentElement.removeChild(lastEntry.progress.domElement);\n        }\n\n        // cleanup\n        if (lastEntry) {\n            lastEntry.destroy();\n            lastEntry = null;\n        }\n\n        this.canvases.pop();\n    }\n\n    /**\n     * Update the dimensions of a canvas element\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {number} width The new width of the element\n     * @param {number} height The new height of the element\n     */\n    updateDimensions(entry, width, height) {\n        const elementWidth = Math.round(width / this.params.pixelRatio);\n        const totalWidth = Math.round(this.width / this.params.pixelRatio);\n\n        // update canvas dimensions\n        entry.updateDimensions(elementWidth, totalWidth, width, height);\n\n        // style element\n        this.style(this.progressWave, { display: 'block' });\n    }\n\n    /**\n     * Clear the whole multi-canvas\n     */\n    clearWave() {\n        util.frame(() => {\n            this.canvases.forEach(entry => entry.clearWave());\n        })();\n    }\n\n    /**\n     * Draw a waveform with bars\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0. Must be an integer.\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawBars(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex: ch }) => {\n                // if drawBars was called within ws.empty we don't pass a start and\n                // don't want anything to happen\n                if (start === undefined) {\n                    return;\n                }\n                // Skip every other value if there are negatives.\n                const peakIndexScale = hasMinVals ? 2 : 1;\n                const length = peaks.length / peakIndexScale;\n                const bar = this.params.barWidth * this.params.pixelRatio;\n                const gap =\n                    this.params.barGap === null\n                        ? Math.max(this.params.pixelRatio, ~~(bar / 2))\n                        : Math.max(\n                            this.params.pixelRatio,\n                            this.params.barGap * this.params.pixelRatio\n                        );\n                const step = bar + gap;\n\n                const scale = length / this.width;\n                const first = start;\n                const last = end;\n                let peakIndex = first;\n                for (peakIndex; peakIndex < last; peakIndex += step) {\n\n                    // search for the highest peak in the range this bar falls into\n                    let peak = 0;\n                    let peakIndexRange = Math.floor(peakIndex * scale) * peakIndexScale; // start index\n                    const peakIndexEnd = Math.floor((peakIndex + step) * scale) * peakIndexScale;\n                    do { // do..while makes sure at least one peak is always evaluated\n                        const newPeak = Math.abs(peaks[peakIndexRange]); // for arrays starting with negative values\n                        if (newPeak > peak) {\n                            peak = newPeak; // higher\n                        }\n                        peakIndexRange += peakIndexScale; // skip every other value for negatives\n                    } while (peakIndexRange < peakIndexEnd);\n\n                    // calculate the height of this bar according to the highest peak found\n                    let h = Math.round((peak / absmax) * halfH);\n\n                    // raise the bar height to the specified minimum height\n                    // Math.max is used to replace any value smaller than barMinHeight (not just 0) with barMinHeight\n                    if (this.params.barMinHeight) {\n                        h = Math.max(h, this.params.barMinHeight);\n                    }\n\n                    this.fillRect(\n                        peakIndex + this.halfPixel,\n                        halfH - h + offsetY,\n                        bar + this.halfPixel,\n                        h * 2,\n                        this.barRadius,\n                        ch\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Draw a waveform\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays\n     * for split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered (If this isn't set only a flat line is rendered)\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @returns {void}\n     */\n    drawWave(peaks, channelIndex, start, end) {\n        return this.prepareDraw(\n            peaks,\n            channelIndex,\n            start,\n            end,\n            ({ absmax, hasMinVals, height, offsetY, halfH, peaks, channelIndex }) => {\n                if (!hasMinVals) {\n                    const reflectedPeaks = [];\n                    const len = peaks.length;\n                    let i = 0;\n                    for (i; i < len; i++) {\n                        reflectedPeaks[2 * i] = peaks[i];\n                        reflectedPeaks[2 * i + 1] = -peaks[i];\n                    }\n                    peaks = reflectedPeaks;\n                }\n\n                // if drawWave was called within ws.empty we don't pass a start and\n                // end and simply want a flat line\n                if (start !== undefined) {\n                    this.drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex);\n                }\n\n                // always draw a median line\n                this.fillRect(\n                    0,\n                    halfH + offsetY - this.halfPixel,\n                    this.width,\n                    this.halfPixel,\n                    this.barRadius,\n                    channelIndex\n                );\n            }\n        );\n    }\n\n    /**\n     * Tell the canvas entries to render their portion of the waveform\n     *\n     * @param {number[]} peaks Peaks data\n     * @param {number} absmax Maximum peak value (absolute)\n     * @param {number} halfH Half the height of the waveform\n     * @param {number} offsetY Offset to the top\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that\n     * should be rendered\n     * @param {channelIndex} channelIndex The channel index of the line drawn\n     */\n    drawLine(peaks, absmax, halfH, offsetY, start, end, channelIndex) {\n        const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n        this.canvases.forEach((entry, i) => {\n            this.setFillStyles(entry, waveColor, progressColor);\n            this.applyCanvasTransforms(entry, this.params.vertical);\n\n            if (this.optimiseZoom) {\n                //Optimising zoom functionality\n                //If there's a wrapper, optimise for the view\n                let priority = 0;\n                if (this.wrapper) {\n                    let canvasRect = entry.wave.getBoundingClientRect();\n                    let wrapperRect = this.wrapper.getBoundingClientRect();\n\n                    //Determine whether canvas is in viewframe or not and assign priority\n                    if (Math.floor(canvasRect['left']) > Math.ceil(wrapperRect['right'])) {\n                        //Canvas is to the right of view window\n                        let distance = canvasRect['left'] - wrapperRect['right'];\n                        priority = Math.ceil(distance / wrapperRect['width']);\n                    } else if (Math.ceil(canvasRect['right']) < Math.floor(wrapperRect['left'])) {\n                        //Canvas is to the left of the view window\n                        let distance = wrapperRect['left'] - canvasRect['right'];\n                        priority = Math.ceil(distance / wrapperRect['width']);\n                    }\n                } else {\n                    //Everything is equal priority\n                }\n\n                //This staggers the drawing of canvases so they don't all draw at once\n                entry.clearWave();\n                clearTimeout(entry.drawTimeout);\n                entry.drawTimeout = setTimeout(function(){\n                    entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n                    entry.drawTimeout = null;\n                }, 25 * priority);\n            } else {\n                entry.drawLines(peaks, absmax, halfH, offsetY, start, end);\n            }\n        });\n    }\n\n    /**\n     * Draw a rectangle on the multi-canvas\n     *\n     * @param {number} x X-position of the rectangle\n     * @param {number} y Y-position of the rectangle\n     * @param {number} width Width of the rectangle\n     * @param {number} height Height of the rectangle\n     * @param {number} radius Radius of the rectangle\n     * @param {channelIndex} channelIndex The channel index of the bar drawn\n     */\n    fillRect(x, y, width, height, radius, channelIndex) {\n        const startCanvas = Math.floor(x / this.maxCanvasWidth);\n        const endCanvas = Math.min(\n            Math.ceil((x + width) / this.maxCanvasWidth) + 1,\n            this.canvases.length\n        );\n        let i = startCanvas;\n        for (i; i < endCanvas; i++) {\n            const entry = this.canvases[i];\n            const leftOffset = i * this.maxCanvasWidth;\n\n            const intersection = {\n                x1: Math.max(x, i * this.maxCanvasWidth),\n                y1: y,\n                x2: Math.min(\n                    x + width,\n                    i * this.maxCanvasWidth + entry.wave.width\n                ),\n                y2: y + height\n            };\n\n            if (intersection.x1 < intersection.x2) {\n                const { waveColor, progressColor } = this.params.splitChannelsOptions.channelColors[channelIndex] || {};\n                this.setFillStyles(entry, waveColor, progressColor);\n                this.applyCanvasTransforms(entry, this.params.vertical);\n\n                entry.fillRects(\n                    intersection.x1 - leftOffset,\n                    intersection.y1,\n                    intersection.x2 - intersection.x1,\n                    intersection.y2 - intersection.y1,\n                    radius\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns whether to hide the channel from being drawn based on params.\n     *\n     * @param {number} channelIndex The index of the current channel.\n     * @returns {bool} True to hide the channel, false to draw.\n     */\n    hideChannel(channelIndex) {\n        return this.params.splitChannels && this.params.splitChannelsOptions.filterChannels.includes(channelIndex);\n    }\n\n    /**\n     * Performs preparation tasks and calculations which are shared by `drawBars`\n     * and `drawWave`\n     *\n     * @param {number[]|Number.<Array[]>} peaks Can also be an array of arrays for\n     * split channel rendering\n     * @param {number} channelIndex The index of the current channel. Normally\n     * should be 0\n     * @param {number?} start The x-offset of the beginning of the area that\n     * should be rendered. If this isn't set only a flat line is rendered\n     * @param {number?} end The x-offset of the end of the area that should be\n     * rendered\n     * @param {function} fn The render function to call, e.g. `drawWave`\n     * @param {number} drawIndex The index of the current channel after filtering.\n     * @param {number?} normalizedMax Maximum modulation value across channels for use with relativeNormalization. Ignored when undefined\n     * @returns {void}\n     */\n    prepareDraw(peaks, channelIndex, start, end, fn, drawIndex, normalizedMax) {\n        return util.frame(() => {\n            // Split channels and call this function with the channelIndex set\n            if (peaks[0] instanceof Array) {\n                const channels = peaks;\n\n                if (this.params.splitChannels) {\n                    const filteredChannels = channels.filter((c, i) => !this.hideChannel(i));\n                    if (!this.params.splitChannelsOptions.overlay) {\n                        this.setHeight(\n                            Math.max(filteredChannels.length, 1) *\n                                this.params.height *\n                                this.params.pixelRatio\n                        );\n                    }\n\n                    let overallAbsMax;\n                    if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.relativeNormalization) {\n                        // calculate maximum peak across channels to use for normalization\n                        overallAbsMax = util.max(channels.map((channelPeaks => util.absMax(channelPeaks))));\n                    }\n\n\n                    return channels.forEach((channelPeaks, i) =>\n                        this.prepareDraw(channelPeaks, i, start, end, fn, filteredChannels.indexOf(channelPeaks), overallAbsMax)\n                    );\n                }\n                peaks = channels[0];\n            }\n\n            // Return and do not draw channel peaks if hidden.\n            if (this.hideChannel(channelIndex)) {\n                return;\n            }\n\n            // calculate maximum modulation value, either from the barHeight\n            // parameter or if normalize=true from the largest value in the peak\n            // set\n            let absmax = 1 / this.params.barHeight;\n            if (this.params.normalize) {\n                absmax = normalizedMax === undefined ? util.absMax(peaks) : normalizedMax;\n            }\n\n            // Bar wave draws the bottom only as a reflection of the top,\n            // so we don't need negative values\n            const hasMinVals = [].some.call(peaks, val => val < 0);\n            const height = this.params.height * this.params.pixelRatio;\n            const halfH = height / 2;\n\n            let offsetY = height * drawIndex || 0;\n\n            // Override offsetY if overlay is true\n            if (this.params.splitChannelsOptions && this.params.splitChannelsOptions.overlay) {\n                offsetY = 0;\n            }\n\n            return fn({\n                absmax: absmax,\n                hasMinVals: hasMinVals,\n                height: height,\n                offsetY: offsetY,\n                halfH: halfH,\n                peaks: peaks,\n                channelIndex: channelIndex\n            });\n        })();\n    }\n\n    /**\n     * Set the fill styles for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {string} waveColor Wave color to draw this entry\n     * @param {string} progressColor Progress color to draw this entry\n     */\n    setFillStyles(entry, waveColor = this.params.waveColor, progressColor = this.params.progressColor) {\n        entry.setFillStyles(waveColor, progressColor);\n    }\n\n    /**\n     * Set the canvas transforms for a certain entry (wave and progress)\n     *\n     * @param {CanvasEntry} entry Target entry\n     * @param {boolean} vertical Whether to render the waveform vertically\n     */\n    applyCanvasTransforms(entry, vertical = false) {\n        entry.applyCanvasTransforms(vertical);\n    }\n\n    /**\n     * Return image data of the multi-canvas\n     *\n     * When using a `type` of `'blob'`, this will return a `Promise`.\n     *\n     * @param {string} format='image/png' An optional value of a format type.\n     * @param {number} quality=0.92 An optional value between 0 and 1.\n     * @param {string} type='dataURL' Either 'dataURL' or 'blob'.\n     * @return {string|string[]|Promise} When using the default `'dataURL'`\n     * `type` this returns a single data URL or an array of data URLs,\n     * one for each canvas. When using the `'blob'` `type` this returns a\n     * `Promise` that resolves with an array of `Blob` instances, one for each\n     * canvas.\n     */\n    getImage(format, quality, type) {\n        if (type === 'blob') {\n            return Promise.all(\n                this.canvases.map(entry => {\n                    return entry.getImage(format, quality, type);\n                })\n            );\n        } else if (type === 'dataURL') {\n            let images = this.canvases.map(entry =>\n                entry.getImage(format, quality, type)\n            );\n            return images.length > 1 ? images : images[0];\n        }\n    }\n\n    /**\n     * Stretches the canvases to mimic zoom without recalculation\n     *\n     * @param {Number} desiredWidth new width of the wave display\n     * @param {Number} progress Value between 0 and 1 for wave progress\n     */\n    stretchCanvases(desiredWidth, progress) {\n        if (!this.optimiseZoom) {\n            //Enable optimsed zooming\n            this.optimiseZoom = true;\n        }\n        let totalCanvasWidth = Math.round(desiredWidth / this.params.pixelRatio);\n        this.width = desiredWidth;\n\n        for (let i = 0; i < this.canvases.length; i++) {\n            this.canvases[i].stretchCanvas(totalCanvasWidth);\n        }\n\n        //Update progress\n        let progressPos = progress * totalCanvasWidth;\n        this.updateProgress(progressPos);\n        this.recenterOnPosition(progressPos, true);\n    }\n\n    /**\n     * Render the new progress\n     *\n     * @param {number} position X-offset of progress position in pixels\n     */\n    updateProgress(position) {\n        this.style(this.progressWave, { width: position + 'px' });\n    }\n}\n","import MediaElement from './mediaelement';\n\n/**\n * MediaElementWebAudio backend: load audio via an HTML5 audio tag, but playback with the WebAudio API.\n * The advantage here is that the html5 <audio> tag can perform range requests on the server and not\n * buffer the entire file in one request, and you still get the filtering and scripting functionality\n * of the webaudio API.\n * Note that in order to use range requests and prevent buffering, you must provide peak data.\n *\n * @since 3.2.0\n */\nexport default class MediaElementWebAudio extends MediaElement {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n        /** @private */\n        this.sourceMediaElement = null;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n    }\n    /**\n     * Private method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @private\n     */\n    _load(media, peaks, preload) {\n        super._load(media, peaks, preload);\n        this.createMediaElementSource(media);\n    }\n\n    /**\n     * Create MediaElementSource node\n     *\n     * @since 3.2.0\n     * @param {HTMLMediaElement} mediaElement HTML5 Audio to load\n     */\n    createMediaElementSource(mediaElement) {\n        this.sourceMediaElement = this.ac.createMediaElementSource(\n            mediaElement\n        );\n        this.sourceMediaElement.connect(this.analyser);\n    }\n\n    play(start, end) {\n        this.resumeAudioContext();\n        return super.play(start, end);\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        super.destroy();\n\n        this.destroyWebAudio();\n    }\n}\n","import WebAudio from './webaudio';\nimport * as util from './util';\n\n/**\n * MediaElement backend\n */\nexport default class MediaElement extends WebAudio {\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super(params);\n        /** @private */\n        this.params = params;\n\n        /**\n         * Initially a dummy media element to catch errors. Once `_load` is\n         * called, this will contain the actual `HTMLMediaElement`.\n         * @private\n         */\n        this.media = {\n            currentTime: 0,\n            duration: 0,\n            paused: true,\n            playbackRate: 1,\n            play() {},\n            pause() {},\n            volume: 0\n        };\n\n        /** @private */\n        this.mediaType = params.mediaType.toLowerCase();\n        /** @private */\n        this.elementPosition = params.elementPosition;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** @private */\n        this.volume = 1;\n        /** @private */\n        this.isMuted = false;\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.onPlayEnd = null;\n        /** @private */\n        this.mediaListeners = {};\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.setPlaybackRate(this.params.audioRate);\n        this.createTimer();\n    }\n\n    /**\n     * Attach event listeners to media element.\n     */\n    _setupMediaListeners() {\n        this.mediaListeners.error = () => {\n            this.fireEvent('error', 'Error loading media element');\n        };\n        this.mediaListeners.waiting = () => {\n            this.fireEvent('waiting');\n        };\n        this.mediaListeners.canplay = () => {\n            this.fireEvent('canplay');\n        };\n        this.mediaListeners.ended = () => {\n            this.fireEvent('finish');\n        };\n        // listen to and relay play, pause and seeked events to enable\n        // playback control from the external media element\n        this.mediaListeners.play = () => {\n            this.fireEvent('play');\n        };\n        this.mediaListeners.pause = () => {\n            this.fireEvent('pause');\n        };\n        this.mediaListeners.seeked = event => {\n            this.fireEvent('seek');\n        };\n        this.mediaListeners.volumechange = event => {\n            this.isMuted = this.media.muted;\n            if (this.isMuted) {\n                this.volume = 0;\n            } else {\n                this.volume = this.media.volume;\n            }\n            this.fireEvent('volume');\n        };\n\n        // reset event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            this.media.removeEventListener(id, this.mediaListeners[id]);\n            this.media.addEventListener(id, this.mediaListeners[id]);\n        });\n    }\n\n    /**\n     * Create a timer to provide a more precise `audioprocess` event.\n     */\n    createTimer() {\n        const onAudioProcess = () => {\n            if (this.isPaused()) {\n                return;\n            }\n            this.fireEvent('audioprocess', this.getCurrentTime());\n\n            // Call again in the next frame\n            util.frame(onAudioProcess)();\n        };\n\n        this.on('play', onAudioProcess);\n\n        // Update the progress one more time to prevent it from being stuck in\n        // case of lower framerates\n        this.on('pause', () => {\n            this.fireEvent('audioprocess', this.getCurrentTime());\n        });\n    }\n\n    /**\n     * Create media element with url as its source,\n     * and append to container element.\n     *\n     * @param {string} url Path to media file\n     * @param {HTMLElement} container HTML element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `url` argument is not a valid media\n     * element.\n     */\n    load(url, container, peaks, preload) {\n        const media = document.createElement(this.mediaType);\n        media.controls = this.params.mediaControls;\n        media.autoplay = this.params.autoplay || false;\n        media.preload = preload == null ? 'auto' : preload;\n        media.src = url;\n        media.style.width = '100%';\n\n        const prevMedia = container.querySelector(this.mediaType);\n        if (prevMedia) {\n            container.removeChild(prevMedia);\n        }\n        container.appendChild(media);\n\n        this._load(media, peaks, preload);\n    }\n\n    /**\n     * Load existing media element.\n     *\n     * @param {HTMLMediaElement} elt HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     */\n    loadElt(elt, peaks) {\n        elt.controls = this.params.mediaControls;\n        elt.autoplay = this.params.autoplay || false;\n\n        this._load(elt, peaks, elt.preload);\n    }\n\n    /**\n     * Method called by both `load` (from url)\n     * and `loadElt` (existing media element) methods.\n     *\n     * @param {HTMLMediaElement} media HTML5 Audio or Video element\n     * @param {number[]|Number.<Array[]>} peaks Array of peak data\n     * @param {string} preload HTML 5 preload attribute value\n     * @throws Will throw an error if the `media` argument is not a valid media\n     * element.\n     * @private\n     */\n    _load(media, peaks, preload) {\n        // verify media element is valid\n        if (\n            !(media instanceof HTMLMediaElement) ||\n            typeof media.addEventListener === 'undefined'\n        ) {\n            throw new Error('media parameter is not a valid media element');\n        }\n\n        // load must be called manually on iOS, otherwise peaks won't draw\n        // until a user interaction triggers load --> 'ready' event\n        //\n        // note that we avoid calling media.load here when given peaks and preload == 'none'\n        // as this almost always triggers some browser fetch of the media.\n        if (typeof media.load == 'function' && !(peaks && preload == 'none')) {\n            // Resets the media element and restarts the media resource. Any\n            // pending events are discarded. How much media data is fetched is\n            // still affected by the preload attribute.\n            media.load();\n        }\n\n        this.media = media;\n        this._setupMediaListeners();\n        this.peaks = peaks;\n        this.onPlayEnd = null;\n        this.buffer = null;\n        this.isMuted = media.muted;\n        this.setPlaybackRate(this.playbackRate);\n        this.setVolume(this.volume);\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Media paused or not\n     */\n    isPaused() {\n        return !this.media || this.media.paused;\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        let duration = (this.buffer || this.media).duration;\n        if (duration >= Infinity) {\n            // streaming audio\n            duration = this.media.seekable.end(0);\n        }\n        return duration;\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} Current time\n     */\n    getCurrentTime() {\n        return this.media && this.media.currentTime;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Current position\n     */\n    getPlayedPercents() {\n        return this.getCurrentTime() / this.getDuration() || 0;\n    }\n\n    /**\n     * Get the audio source playback rate.\n     *\n     * @return {number} Playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate || this.media.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value Playback rate\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.media.playbackRate = this.playbackRate;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     */\n    seekTo(start) {\n        if (start != null && !isNaN(start)) {\n            this.media.currentTime = start;\n        }\n        this.clearPlayEnd();\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop, relative to the beginning of a clip.\n     * @emits MediaElement#play\n     * @return {Promise} Result\n     */\n    play(start, end) {\n        this.seekTo(start);\n        const promise = this.media.play();\n        end && this.setPlayEnd(end);\n\n        return promise;\n    }\n\n    /**\n     * Pauses the loaded audio.\n     *\n     * @emits MediaElement#pause\n     * @return {Promise} Result\n     */\n    pause() {\n        let promise;\n\n        if (this.media) {\n            promise = this.media.pause();\n        }\n        this.clearPlayEnd();\n\n        return promise;\n    }\n\n    /**\n     * Set the play end\n     *\n     * @param {number} end Where to end\n     */\n    setPlayEnd(end) {\n        this.clearPlayEnd();\n\n        this._onPlayEnd = time => {\n            if (time >= end) {\n                this.pause();\n                this.seekTo(end);\n            }\n        };\n        this.on('audioprocess', this._onPlayEnd);\n    }\n\n    /** @private */\n    clearPlayEnd() {\n        if (this._onPlayEnd) {\n            this.un('audioprocess', this._onPlayEnd);\n            this._onPlayEnd = null;\n        }\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into\n     * <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of\n     * arrays of peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.buffer) {\n            return super.getPeaks(length, first, last);\n        }\n        return this.peaks || [];\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            if (!this.media.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            return this.media.setSinkId(deviceId);\n        }\n\n        return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.volume;\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.volume = value;\n        // no need to change when it's already at that volume\n        if (this.media.volume !== this.volume) {\n            this.media.volume = this.volume;\n        }\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @since 4.0.0\n     * @param {boolean} muted Specify `true` to mute audio.\n     */\n    setMute(muted) {\n        // This causes a volume change to be emitted too through the\n        // volumechange event listener.\n        this.isMuted = this.media.muted = muted;\n    }\n\n    /**\n     * This is called when wavesurfer is destroyed\n     *\n     */\n    destroy() {\n        this.pause();\n        this.unAll();\n        this.destroyed = true;\n\n        // cleanup media event listeners\n        Object.keys(this.mediaListeners).forEach(id => {\n            if (this.media) {\n                this.media.removeEventListener(id, this.mediaListeners[id]);\n            }\n        });\n\n        if (\n            this.params.removeMediaElementOnDestroy &&\n            this.media &&\n            this.media.parentNode\n        ) {\n            this.media.parentNode.removeChild(this.media);\n        }\n\n        this.media = null;\n    }\n}\n","/**\n * Caches the decoded peaks data to improve rendering speed for large audio\n *\n * Is used if the option parameter `partialRender` is set to `true`\n */\nexport default class PeakCache {\n    /**\n     * Instantiate cache\n     */\n    constructor() {\n        this.clearPeakCache();\n    }\n\n    /**\n     * Empty the cache\n     */\n    clearPeakCache() {\n        /**\n         * Flat array with entries that are always in pairs to mark the\n         * beginning and end of each subrange.  This is a convenience so we can\n         * iterate over the pairs for easy set difference operations.\n         * @private\n         */\n        this.peakCacheRanges = [];\n        /**\n         * Length of the entire cachable region, used for resetting the cache\n         * when this changes (zoom events, for instance).\n         * @private\n         */\n        this.peakCacheLength = -1;\n    }\n\n    /**\n     * Add a range of peaks to the cache\n     *\n     * @param {number} length The length of the range\n     * @param {number} start The x offset of the start of the range\n     * @param {number} end The x offset of the end of the range\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    addRangeToPeakCache(length, start, end) {\n        if (length != this.peakCacheLength) {\n            this.clearPeakCache();\n            this.peakCacheLength = length;\n        }\n\n        // Return ranges that weren't in the cache before the call.\n        let uncachedRanges = [];\n        let i = 0;\n        // Skip ranges before the current start.\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] < start\n        ) {\n            i++;\n        }\n        // If |i| is even, |start| falls after an existing range.  Otherwise,\n        // |start| falls between an existing range, and the uncached region\n        // starts when we encounter the next node in |peakCacheRanges| or\n        // |end|, whichever comes first.\n        if (i % 2 == 0) {\n            uncachedRanges.push(start);\n        }\n        while (\n            i < this.peakCacheRanges.length &&\n            this.peakCacheRanges[i] <= end\n        ) {\n            uncachedRanges.push(this.peakCacheRanges[i]);\n            i++;\n        }\n        // If |i| is even, |end| is after all existing ranges.\n        if (i % 2 == 0) {\n            uncachedRanges.push(end);\n        }\n\n        // Filter out the 0-length ranges.\n        uncachedRanges = uncachedRanges.filter((item, pos, arr) => {\n            if (pos == 0) {\n                return item != arr[pos + 1];\n            } else if (pos == arr.length - 1) {\n                return item != arr[pos - 1];\n            }\n            return item != arr[pos - 1] && item != arr[pos + 1];\n        });\n\n        // Merge the two ranges together, uncachedRanges will either contain\n        // wholly new points, or duplicates of points in peakCacheRanges.  If\n        // duplicates are detected, remove both and extend the range.\n        this.peakCacheRanges = this.peakCacheRanges.concat(uncachedRanges);\n        this.peakCacheRanges = this.peakCacheRanges\n            .sort((a, b) => a - b)\n            .filter((item, pos, arr) => {\n                if (pos == 0) {\n                    return item != arr[pos + 1];\n                } else if (pos == arr.length - 1) {\n                    return item != arr[pos - 1];\n                }\n                return item != arr[pos - 1] && item != arr[pos + 1];\n            });\n\n        // Push the uncached ranges into an array of arrays for ease of\n        // iteration in the functions that call this.\n        const uncachedRangePairs = [];\n        for (i = 0; i < uncachedRanges.length; i += 2) {\n            uncachedRangePairs.push([uncachedRanges[i], uncachedRanges[i + 1]]);\n        }\n\n        return uncachedRangePairs;\n    }\n\n    /**\n     * For testing\n     *\n     * @return {Number.<Array[]>} Array with arrays of numbers\n     */\n    getCacheRanges() {\n        const peakCacheRangePairs = [];\n        let i;\n        for (i = 0; i < this.peakCacheRanges.length; i += 2) {\n            peakCacheRangePairs.push([\n                this.peakCacheRanges[i],\n                this.peakCacheRanges[i + 1]\n            ]);\n        }\n        return peakCacheRangePairs;\n    }\n}\n","import utilMax from './max';\r\nimport utilmin from './min';\r\n\r\n/**\r\n * Get the largest absolute value in an array\r\n *\r\n * @param   {Array} values Array of numbers\r\n * @returns {Number} Largest number found\r\n * @example console.log(max([-3, 2, 1]), max([-3, 2, 4])); // logs 3 4\r\n * @since 4.3.0\r\n */\r\nexport default function absMax(values) {\r\n    const max = utilMax(values);\r\n    const min = utilmin(values);\r\n    return -min > max ? -min : max;\r\n}\r\n","/**\n * Returns a number limited to the given range.\n *\n * @param {number} val The number to be limited to a range\n * @param {number} min The lower boundary of the limit range\n * @param {number} max The upper boundary of the limit range\n * @returns {number} A number in the range [min, max]\n */\nexport default function clamp(val, min, max) {\n    return Math.min(Math.max(min, val), max);\n}\n","/**\n * @since 3.0.0\n */\n\nimport Observer from './observer';\n\nclass ProgressHandler {\n    /**\n     * Instantiate ProgressHandler\n     *\n     * @param {Observer} instance The `fetchFile` observer instance.\n     * @param {Number} contentLength Content length.\n     * @param {Response} response Response object.\n     */\n    constructor(instance, contentLength, response) {\n        this.instance = instance;\n        this.instance._reader = response.body.getReader();\n\n        this.total = parseInt(contentLength, 10);\n        this.loaded = 0;\n    }\n\n    /**\n     * A method that is called once, immediately after the `ReadableStream``\n     * is constructed.\n     *\n     * @param {ReadableStreamDefaultController} controller Controller instance\n     *     used to control the stream.\n     */\n    start(controller) {\n        const read = () => {\n            // instance._reader.read() returns a promise that resolves\n            // when a value has been received\n            this.instance._reader\n                .read()\n                .then(({ done, value }) => {\n                    // result objects contain two properties:\n                    // done  - true if the stream has already given you all its data.\n                    // value - some data. Always undefined when done is true.\n                    if (done) {\n                        // ensure onProgress called when content-length=0\n                        if (this.total === 0) {\n                            this.instance.onProgress.call(this.instance, {\n                                loaded: this.loaded,\n                                total: this.total,\n                                lengthComputable: false\n                            });\n                        }\n                        // no more data needs to be consumed, close the stream\n                        controller.close();\n                        return;\n                    }\n\n                    this.loaded += value.byteLength;\n                    this.instance.onProgress.call(this.instance, {\n                        loaded: this.loaded,\n                        total: this.total,\n                        lengthComputable: !(this.total === 0)\n                    });\n                    // enqueue the next data chunk into our target stream\n                    controller.enqueue(value);\n                    read();\n                })\n                .catch(error => {\n                    controller.error(error);\n                });\n        };\n\n        read();\n    }\n}\n\n/**\n * Load a file using `fetch`.\n *\n * @param {object} options Request options to use. See example below.\n * @returns {Observer} Observer instance\n * @example\n * // default options\n * let options = {\n *     url: undefined,\n *     method: 'GET',\n *     mode: 'cors',\n *     credentials: 'same-origin',\n *     cache: 'default',\n *     responseType: 'json',\n *     requestHeaders: [],\n *     redirect: 'follow',\n *     referrer: 'client'\n * };\n *\n * // override some options\n * options.url = '../media/demo.wav';\n\n * // available types: 'arraybuffer', 'blob', 'json' or 'text'\n * options.responseType = 'arraybuffer';\n *\n * // make fetch call\n * let request = util.fetchFile(options);\n *\n * // listen for events\n * request.on('progress', e => {\n *     console.log('progress', e);\n * });\n *\n * request.on('success', data => {\n *     console.log('success!', data);\n * });\n *\n * request.on('error', e => {\n *     console.warn('fetchFile error: ', e);\n * });\n */\nexport default function fetchFile(options) {\n    if (!options) {\n        throw new Error('fetch options missing');\n    } else if (!options.url) {\n        throw new Error('fetch url missing');\n    }\n    const instance = new Observer();\n    const fetchHeaders = new Headers();\n    const fetchRequest = new Request(options.url);\n\n    // add ability to abort\n    instance.controller = new AbortController();\n\n    // check if headers have to be added\n    if (options && options.requestHeaders) {\n        // add custom request headers\n        options.requestHeaders.forEach(header => {\n            fetchHeaders.append(header.key, header.value);\n        });\n    }\n\n    // parse fetch options\n    const responseType = options.responseType || 'json';\n    const fetchOptions = {\n        method: options.method || 'GET',\n        headers: fetchHeaders,\n        mode: options.mode || 'cors',\n        credentials: options.credentials || 'same-origin',\n        cache: options.cache || 'default',\n        redirect: options.redirect || 'follow',\n        referrer: options.referrer || 'client',\n        signal: instance.controller.signal\n    };\n\n    fetch(fetchRequest, fetchOptions)\n        .then(response => {\n            // store response reference\n            instance.response = response;\n\n            let progressAvailable = true;\n            if (!response.body) {\n                // ReadableStream is not yet supported in this browser\n                // see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n                progressAvailable = false;\n            }\n\n            // Server must send CORS header \"Access-Control-Expose-Headers: content-length\"\n            const contentLength = response.headers.get('content-length');\n            if (contentLength === null) {\n                // Content-Length server response header missing.\n                // Don't evaluate download progress if we can't compare against a total size\n                // see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Access-Control-Expose-Headers\n                progressAvailable = false;\n            }\n\n            if (!progressAvailable) {\n                // not able to check download progress so skip it\n                return response;\n            }\n\n            // fire progress event when during load\n            instance.onProgress = e => {\n                instance.fireEvent('progress', e);\n            };\n\n            return new Response(\n                new ReadableStream(\n                    new ProgressHandler(instance, contentLength, response)\n                ),\n                fetchOptions\n            );\n        })\n        .then(response => {\n            let errMsg;\n            if (response.ok) {\n                switch (responseType) {\n                    case 'arraybuffer':\n                        return response.arrayBuffer();\n\n                    case 'json':\n                        return response.json();\n\n                    case 'blob':\n                        return response.blob();\n\n                    case 'text':\n                        return response.text();\n\n                    default:\n                        errMsg = 'Unknown responseType: ' + responseType;\n                        break;\n                }\n            }\n            if (!errMsg) {\n                errMsg = 'HTTP error status: ' + response.status;\n            }\n            throw new Error(errMsg);\n        })\n        .then(response => {\n            instance.fireEvent('success', response);\n        })\n        .catch(error => {\n            instance.fireEvent('error', error);\n        });\n\n    // return the fetch request\n    instance.fetchRequest = fetchRequest;\n    return instance;\n}\n","import reqAnimationFrame from './request-animation-frame';\n\n/**\n * Create a function which will be called at the next requestAnimationFrame\n * cycle\n *\n * @param {function} func The function to call\n *\n * @return {func} The function wrapped within a requestAnimationFrame\n */\nexport default function frame(func) {\n    return (...args) => reqAnimationFrame(() => func(...args));\n}\n","/**\n * Get a random prefixed ID\n *\n * @param {String} prefix Prefix to use. Default is `'wavesurfer_'`.\n * @returns {String} Random prefixed ID\n * @example\n * console.log(getId()); // logs 'wavesurfer_b5pors4ru6g'\n *\n * let prefix = 'foo-';\n * console.log(getId(prefix)); // logs 'foo-b5pors4ru6g'\n */\nexport default function getId(prefix) {\n    if (prefix === undefined) {\n        prefix = 'wavesurfer_';\n    }\n    return (\n        prefix +\n        Math.random()\n            .toString(32)\n            .substring(2)\n    );\n}\n","export { default as getId } from './get-id';\nexport { default as max } from './max';\nexport { default as min } from './min';\nexport { default as absMax } from './absMax';\nexport { default as Observer } from './observer';\nexport { default as style } from './style';\nexport { default as requestAnimationFrame } from './request-animation-frame';\nexport { default as frame } from './frame';\nexport { default as debounce } from 'debounce';\nexport { default as preventClick } from './prevent-click';\nexport { default as fetchFile } from './fetch';\nexport { default as clamp } from './clamp';\nexport { default as withOrientation } from './orientation';\nexport { default as ignoreSilenceMode } from './silence-mode';\n","/**\n * Get the largest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Largest number found\n * @example console.log(max([1, 2, 3])); // logs 3\n */\nexport default function max(values) {\n    let largest = -Infinity;\n    Object.keys(values).forEach(i => {\n        if (values[i] > largest) {\n            largest = values[i];\n        }\n    });\n    return largest;\n}\n","/**\n * Get the smallest value\n *\n * @param   {Array} values Array of numbers\n * @returns {Number} Smallest number found\n * @example console.log(min([1, 2, 3])); // logs 1\n */\nexport default function min(values) {\n    let smallest = Number(Infinity);\n    Object.keys(values).forEach(i => {\n        if (values[i] < smallest) {\n            smallest = values[i];\n        }\n    });\n    return smallest;\n}\n","/**\n * @typedef {Object} ListenerDescriptor\n * @property {string} name The name of the event\n * @property {function} callback The callback\n * @property {function} un The function to call to remove the listener\n */\n\n/**\n * Observer class\n */\nexport default class Observer {\n    /**\n     * Instantiate Observer\n     */\n    constructor() {\n        /**\n         * @private\n         * @todo Initialise the handlers here already and remove the conditional\n         * assignment in `on()`\n         */\n        this._disabledEventEmissions = [];\n        this.handlers = null;\n    }\n    /**\n     * Attach a handler function for an event.\n     *\n     * @param {string} event Name of the event to listen to\n     * @param {function} fn The callback to trigger when the event is fired\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    on(event, fn) {\n        if (!this.handlers) {\n            this.handlers = {};\n        }\n\n        let handlers = this.handlers[event];\n        if (!handlers) {\n            handlers = this.handlers[event] = [];\n        }\n        handlers.push(fn);\n\n        // Return an event descriptor\n        return {\n            name: event,\n            callback: fn,\n            un: (e, fn) => this.un(e, fn)\n        };\n    }\n\n    /**\n     * Remove an event handler.\n     *\n     * @param {string} event Name of the event the listener that should be\n     * removed listens to\n     * @param {function} fn The callback that should be removed\n     */\n    un(event, fn) {\n        if (!this.handlers) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        let i;\n        if (handlers) {\n            if (fn) {\n                for (i = handlers.length - 1; i >= 0; i--) {\n                    if (handlers[i] == fn) {\n                        handlers.splice(i, 1);\n                    }\n                }\n            } else {\n                handlers.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Remove all event handlers.\n     */\n    unAll() {\n        this.handlers = null;\n    }\n\n    /**\n     * Attach a handler to an event. The handler is executed at most once per\n     * event type.\n     *\n     * @param {string} event The event to listen to\n     * @param {function} handler The callback that is only to be called once\n     * @return {ListenerDescriptor} The event descriptor\n     */\n    once(event, handler) {\n        const fn = (...args) => {\n            /*  eslint-disable no-invalid-this */\n            handler.apply(this, args);\n            /*  eslint-enable no-invalid-this */\n            setTimeout(() => {\n                this.un(event, fn);\n            }, 0);\n        };\n        return this.on(event, fn);\n    }\n\n    /**\n     * Disable firing a list of events by name. When specified, event handlers for any event type\n     * passed in here will not be called.\n     *\n     * @since 4.0.0\n     * @param {string[]} eventNames an array of event names to disable emissions for\n     * @example\n     * // disable seek and interaction events\n     * wavesurfer.setDisabledEventEmissions(['seek', 'interaction']);\n     */\n    setDisabledEventEmissions(eventNames) {\n        this._disabledEventEmissions = eventNames;\n    }\n\n    /**\n     * plugins borrow part of this class without calling the constructor,\n     * so we have to be careful about _disabledEventEmissions\n     */\n\n    _isDisabledEventEmission(event) {\n        return this._disabledEventEmissions && this._disabledEventEmissions.includes(event);\n    }\n\n    /**\n     * Manually fire an event\n     *\n     * @param {string} event The event to fire manually\n     * @param {...any} args The arguments with which to call the listeners\n     */\n    fireEvent(event, ...args) {\n        if (!this.handlers || this._isDisabledEventEmission(event)) {\n            return;\n        }\n\n        const handlers = this.handlers[event];\n        handlers &&\n            handlers.forEach(fn => {\n                fn(...args);\n            });\n    }\n}\n","const verticalPropMap = {\n    width: 'height',\n    height: 'width',\n\n    overflowX: 'overflowY',\n    overflowY: 'overflowX',\n\n    clientWidth: 'clientHeight',\n    clientHeight: 'clientWidth',\n\n    clientX: 'clientY',\n    clientY: 'clientX',\n\n    scrollWidth: 'scrollHeight',\n    scrollLeft: 'scrollTop',\n\n    offsetLeft: 'offsetTop',\n    offsetTop: 'offsetLeft',\n    offsetHeight: 'offsetWidth',\n    offsetWidth: 'offsetHeight',\n\n    left: 'top',\n    right: 'bottom',\n    top: 'left',\n    bottom: 'right',\n\n    borderRightStyle: 'borderBottomStyle',\n    borderRightWidth: 'borderBottomWidth',\n    borderRightColor: 'borderBottomColor'\n};\n\n/**\n * Convert a horizontally-oriented property name to a vertical one.\n *\n * @param {string} prop A property name\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {string} prop, converted appropriately\n */\nfunction mapProp(prop, vertical) {\n    if (Object.prototype.hasOwnProperty.call(verticalPropMap, prop)) {\n        return vertical ? verticalPropMap[prop] : prop;\n    } else {\n        return prop;\n    }\n}\n\nconst isProxy = Symbol(\"isProxy\");\n\n/**\n * Returns an appropriately oriented object based on vertical.\n * If vertical is true, attribute getting and setting will be mapped through\n * verticalPropMap, so that e.g. getting the object's .width will give its\n * .height instead.\n * Certain methods of an oriented object will return oriented objects as well.\n * Oriented objects can't be added to the DOM directly since they are Proxy objects\n * and thus fail typechecks. Use domElement to get the actual element for this.\n *\n * @param {object} target The object to be wrapped and oriented\n * @param {bool} vertical Whether the element is oriented vertically\n * @returns {Proxy} An oriented object with attr translation via verticalAttrMap\n * @since 5.0.0\n */\nexport default function withOrientation(target, vertical) {\n    if (target[isProxy]) {\n        return target;\n    } else {\n        return new Proxy(\n            target, {\n                get: function(obj, prop, receiver) {\n                    if (prop === isProxy) {\n                        return true;\n                    } else if (prop === 'domElement') {\n                        return obj;\n                    } else if (prop === 'style') {\n                        return withOrientation(obj.style, vertical);\n                    } else if (prop === 'canvas') {\n                        return withOrientation(obj.canvas, vertical);\n                    } else if (prop === 'getBoundingClientRect') {\n                        return function(...args) {\n                            return withOrientation(obj.getBoundingClientRect(...args), vertical);\n                        };\n                    } else if (prop === 'getContext') {\n                        return function(...args) {\n                            return withOrientation(obj.getContext(...args), vertical);\n                        };\n                    } else {\n                        let value = obj[mapProp(prop, vertical)];\n                        return typeof value == 'function' ? value.bind(obj) : value;\n                    }\n                },\n                set: function(obj, prop, value) {\n                    obj[mapProp(prop, vertical)] = value;\n                    return true;\n                }\n            }\n        );\n    }\n}\n","/**\n * Stops propagation of click event and removes event listener\n *\n * @private\n * @param {object} event The click event\n */\nfunction preventClickHandler(event) {\n    event.stopPropagation();\n    document.body.removeEventListener('click', preventClickHandler, true);\n}\n\n/**\n * Starts listening for click event and prevent propagation\n *\n * @param {object} values Values\n */\nexport default function preventClick(values) {\n    document.body.addEventListener('click', preventClickHandler, true);\n}\n","/* eslint-disable valid-jsdoc */\n/**\n * Returns the `requestAnimationFrame` function for the browser, or a shim with\n * `setTimeout` if the function is not found\n *\n * @return {function} Available `requestAnimationFrame` function for the browser\n */\nexport default (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    ((callback, element) => setTimeout(callback, 1000 / 60))\n).bind(window);\n","/**\n * Ignores device silence mode when using the `WebAudio` backend.\n *\n * Many mobile devices contain a hardware button to mute the ringtone for incoming\n * calls and messages. Unfortunately, on some platforms like iOS, this also mutes\n * wavesurfer's audio when using the `WebAudio` backend. This function creates a\n * temporary `<audio>` element that makes sure the WebAudio backend keeps playing\n * when muting the device ringer.\n *\n * @since 5.2.0\n */\nexport default function ignoreSilenceMode() {\n    // Set webaudio context with 1 second silent audio 44100 bit rate buffer to allow playing audio even if silent switch is on the device\n    const silentAC = new AudioContext();\n    const silentBS = silentAC.createBufferSource();\n    silentBS.buffer = silentAC.createBuffer(1, 1, 44100);\n    silentBS.connect(silentAC.destination);\n    silentBS.start();\n\n    // Set the src to a short bit of url encoded as a silent mp3\n    // NOTE The silence MP3 must be high quality, when web audio sounds are played\n    // in parallel the web audio sound is mixed to match the bitrate of the html sound\n    // 0.01 seconds of silence VBR220-260 Joint Stereo 859B\n    const audioData = \"data:audio/mpeg;base64,//uQxAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAACAAACcQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA//////////////////////////////////////////////////////////////////8AAABhTEFNRTMuMTAwA8MAAAAAAAAAABQgJAUHQQAB9AAAAnGMHkkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQxAADgnABGiAAQBCqgCRMAAgEAH///////////////7+n/9FTuQsQH//////2NG0jWUGlio5gLQTOtIoeR2WX////X4s9Atb/JRVCbBUpeRUq//////////////////9RUi0f2jn/+xDECgPCjAEQAABN4AAANIAAAAQVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVQ==\";\n\n    // disable iOS Airplay (setting the attribute in js doesn't work)\n    let tmp = document.createElement(\"div\");\n    tmp.innerHTML = '<audio x-webkit-airplay=\"deny\"></audio>';\n\n    let audioSilentMode = tmp.children.item(0);\n    audioSilentMode.src = audioData;\n    audioSilentMode.preload = \"auto\";\n    audioSilentMode.type = \"audio/mpeg\";\n    audioSilentMode.disableRemotePlayback = true;\n\n    // play\n    audioSilentMode.play();\n\n    // cleanup\n    audioSilentMode.remove();\n    tmp.remove();\n}\n","/**\n * Apply a map of styles to an element\n *\n * @param {HTMLElement} el The element that the styles will be applied to\n * @param {Object} styles The map of propName: attribute, both are used as-is\n *\n * @return {HTMLElement} el\n */\nexport default function style(el, styles) {\n    Object.keys(styles).forEach(prop => {\n        if (el.style[prop] !== styles[prop]) {\n            el.style[prop] = styles[prop];\n        }\n    });\n    return el;\n}\n","import * as util from './util';\nimport MultiCanvas from './drawer.multicanvas';\nimport WebAudio from './webaudio';\nimport MediaElement from './mediaelement';\nimport PeakCache from './peakcache';\nimport MediaElementWebAudio from './mediaelement-webaudio';\n\n/*\n * This work is licensed under a BSD-3-Clause License.\n */\n\n/** @external {HTMLElement} https://developer.mozilla.org/en/docs/Web/API/HTMLElement */\n/** @external {OfflineAudioContext} https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext */\n/** @external {File} https://developer.mozilla.org/en-US/docs/Web/API/File */\n/** @external {Blob} https://developer.mozilla.org/en-US/docs/Web/API/Blob */\n/** @external {CanvasRenderingContext2D} https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D */\n/** @external {MediaStreamConstraints} https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints */\n/** @external {AudioNode} https://developer.mozilla.org/de/docs/Web/API/AudioNode */\n\n/**\n * @typedef {Object} WavesurferParams\n * @property {AudioContext} audioContext=null Use your own previously\n * initialized AudioContext or leave blank.\n * @property {number} audioRate=1 Speed at which to play audio. Lower number is\n * slower.\n * @property {ScriptProcessorNode} audioScriptProcessor=null Use your own previously\n * initialized ScriptProcessorNode or leave blank.\n * @property {boolean} autoCenter=true If a scrollbar is present, center the\n * waveform on current progress\n * @property {number} autoCenterRate=5 If autoCenter is active, rate at which the\n * waveform is centered\n * @property {boolean} autoCenterImmediately=false If autoCenter is active, immediately\n * center waveform on current progress\n * @property {string} backend='WebAudio' `'WebAudio'|'MediaElement'|'MediaElementWebAudio'` In most cases\n * you don't have to set this manually. MediaElement is a fallback for unsupported browsers.\n * MediaElementWebAudio allows to use WebAudio API also with big audio files, loading audio like with\n * MediaElement backend (HTML5 audio tag). You have to use the same methods of MediaElement backend for loading and\n * playback, giving also peaks, so the audio data are not decoded. In this way you can use WebAudio features, like filters,\n * also with audio with big duration. For example:\n * ` wavesurfer.load(url | HTMLMediaElement, peaks, preload, duration);\n *   wavesurfer.play();\n *   wavesurfer.setFilter(customFilter);\n * `\n * @property {string} backgroundColor=null Change background color of the\n * waveform container.\n * @property {number} barHeight=1 The height of the wave bars.\n * @property {number} barRadius=0 The radius of the wave bars. Makes bars rounded\n * @property {number} barGap=null The optional spacing between bars of the wave,\n * if not provided will be calculated in legacy format.\n * @property {number} barWidth=null Draw the waveform using bars.\n * @property {number} barMinHeight=null If specified, draw at least a bar of this height,\n * eliminating waveform gaps\n * @property {boolean} closeAudioContext=false Close and nullify all audio\n * contexts when the destroy method is called.\n * @property {!string|HTMLElement} container CSS selector or HTML element where\n * the waveform should be drawn. This is the only required parameter.\n * @property {string} cursorColor='#333' The fill color of the cursor indicating\n * the playhead position.\n * @property {number} cursorWidth=1 Measured in pixels.\n * @property {object} drawingContextAttributes={desynchronized: false} Drawing context\n * attributes.\n * @property {number} duration=null Optional audio length so pre-rendered peaks\n * can be display immediately for example.\n * @property {boolean} fillParent=true Whether to fill the entire container or\n * draw only according to `minPxPerSec`.\n * @property {boolean} forceDecode=false Force decoding of audio using web audio\n * when zooming to get a more detailed waveform.\n * @property {number} height=128 The height of the waveform. Measured in\n * pixels.\n * @property {boolean} hideScrollbar=false Whether to hide the horizontal\n * scrollbar when one would normally be shown.\n * @property {boolean} hideCursor=false Whether to hide the mouse cursor\n * when one would normally be shown by default.\n * @property {boolean} ignoreSilenceMode=false If true, ignores device silence mode\n * when using the `WebAudio` backend.\n * @property {boolean} interact=true Whether the mouse interaction will be\n * enabled at initialization. You can switch this parameter at any time later\n * on.\n * @property {boolean} loopSelection=true (Use with regions plugin) Enable\n * looping of selected regions\n * @property {number} maxCanvasWidth=4000 Maximum width of a single canvas in\n * pixels, excluding a small overlap (2 * `pixelRatio`, rounded up to the next\n * even integer). If the waveform is longer than this value, additional canvases\n * will be used to render the waveform, which is useful for very large waveforms\n * that may be too wide for browsers to draw on a single canvas.\n * @property {boolean} mediaControls=false (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * this enables the native controls for the media element\n * @property {string} mediaType='audio' (Use with backend `MediaElement` or `MediaElementWebAudio`)\n * `'audio'|'video'` ('video' only for `MediaElement`)\n * @property {number} minPxPerSec=20 Minimum number of pixels per second of\n * audio.\n * @property {boolean} normalize=false If true, normalize by the maximum peak\n * instead of 1.0.\n * @property {boolean} partialRender=false Use the PeakCache to improve\n * rendering speed of large waveforms\n * @property {number} pixelRatio=window.devicePixelRatio The pixel ratio used to\n * calculate display\n * @property {PluginDefinition[]} plugins=[] An array of plugin definitions to\n * register during instantiation, they will be directly initialised unless they\n * are added with the `deferInit` property set to true.\n * @property {string} progressColor='#555' The fill color of the part of the\n * waveform behind the cursor. When `progressColor` and `waveColor` are the same\n * the progress wave is not rendered at all.\n * @property {boolean} removeMediaElementOnDestroy=true Set to false to keep the\n * media element in the DOM when the player is destroyed. This is useful when\n * reusing an existing media element via the `loadMediaElement` method.\n * @property {Object} renderer=MultiCanvas Can be used to inject a custom\n * renderer.\n * @property {boolean|number} responsive=false If set to `true` resize the\n * waveform, when the window is resized. This is debounced with a `100ms`\n * timeout by default. If this parameter is a number it represents that timeout.\n * @property {boolean} rtl=false If set to `true`, renders waveform from\n * right-to-left.\n * @property {boolean} scrollParent=false Whether to scroll the container with a\n * lengthy waveform. Otherwise the waveform is shrunk to the container width\n * (see fillParent).\n * @property {number} skipLength=2 Number of seconds to skip with the\n * skipForward() and skipBackward() methods.\n * @property {boolean} splitChannels=false Render with separate waveforms for\n * the channels of the audio\n * @property {SplitChannelOptions} splitChannelsOptions={} Options for splitChannel rendering\n * @property {boolean} vertical=false Render the waveform vertically instead of horizontally.\n * @property {string} waveColor='#999' The fill color of the waveform after the\n * cursor.\n * @property {object} xhr={} XHR options. For example:\n * `let xhr = {\n *     cache: 'default',\n *     mode: 'cors',\n *     method: 'GET',\n *     credentials: 'same-origin',\n *     redirect: 'follow',\n *     referrer: 'client',\n *     requestHeaders: [\n *         {\n *             key: 'Authorization',\n *             value: 'my-token'\n *         }\n *     ]\n * };`\n */\n\n/**\n * @typedef {Object} PluginDefinition\n * @desc The Object used to describe a plugin\n * @example wavesurfer.addPlugin(pluginDefinition);\n * @property {string} name The name of the plugin, the plugin instance will be\n * added as a property to the wavesurfer instance under this name\n * @property {?Object} staticProps The properties that should be added to the\n * wavesurfer instance as static properties\n * @property {?boolean} deferInit Don't initialise plugin\n * automatically\n * @property {Object} params={} The plugin parameters, they are the first parameter\n * passed to the plugin class constructor function\n * @property {PluginClass} instance The plugin instance factory, is called with\n * the dependency specified in extends. Returns the plugin class.\n */\n\n/**\n * @typedef {Object} SplitChannelOptions\n * @desc parameters applied when splitChannels option is true\n * @property {boolean} overlay=false determines whether channels are rendered on top of each other or on separate tracks\n * @property {object} channelColors={} object describing color for each channel. Example:\n * {\n *     0: {\n *         progressColor: 'green',\n *         waveColor: 'pink'\n *     },\n *     1: {\n *         progressColor: 'orange',\n *         waveColor: 'purple'\n *     }\n * }\n * @property {number[]} filterChannels=[] indexes of channels to be hidden from rendering\n * @property {boolean} relativeNormalization=false determines whether\n * normalization is done per channel or maintains proportionality between\n * channels. Only applied when normalize and splitChannels are both true.\n * @property {boolean} splitDragSelection=false determines if drag selection in regions\n * plugin works separately on each channel or only one selection for all channels\n * @since 4.3.0\n */\n\n/**\n * @interface PluginClass\n *\n * @desc This is the interface which is implemented by all plugin classes. Note\n * that this only turns into an observer after being passed through\n * `wavesurfer.addPlugin`.\n *\n * @extends {Observer}\n */\nclass PluginClass {\n    /**\n     * Plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * It returns a `PluginDefinition` object representing the plugin.\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     */\n    create(params) {}\n    /**\n     * Construct the plugin\n     *\n     * @param {Object} params={} The plugin params (specific to the plugin)\n     * @param {Object} ws The wavesurfer instance\n     */\n    constructor(params, ws) {}\n    /**\n     * Initialise the plugin\n     *\n     * Start doing something. This is called by\n     * `wavesurfer.initPlugin(pluginName)`\n     */\n    init() {}\n    /**\n     * Destroy the plugin instance\n     *\n     * Stop doing something. This is called by\n     * `wavesurfer.destroyPlugin(pluginName)`\n     */\n    destroy() {}\n}\n\n/**\n * WaveSurfer core library class\n *\n * @extends {Observer}\n * @example\n * const params = {\n *   container: '#waveform',\n *   waveColor: 'violet',\n *   progressColor: 'purple'\n * };\n *\n * // initialise like this\n * const wavesurfer = WaveSurfer.create(params);\n *\n * // or like this ...\n * const wavesurfer = new WaveSurfer(params);\n * wavesurfer.init();\n *\n * // load audio file\n * wavesurfer.load('example/media/demo.wav');\n */\nexport default class WaveSurfer extends util.Observer {\n    /** @private */\n    defaultParams = {\n        audioContext: null,\n        audioScriptProcessor: null,\n        audioRate: 1,\n        autoCenter: true,\n        autoCenterRate: 5,\n        autoCenterImmediately: false,\n        backend: 'WebAudio',\n        backgroundColor: null,\n        barHeight: 1,\n        barRadius: 0,\n        barGap: null,\n        barMinHeight: null,\n        container: null,\n        cursorColor: '#333',\n        cursorWidth: 1,\n        dragSelection: true,\n        drawingContextAttributes: {\n            // Boolean that hints the user agent to reduce the latency\n            // by desynchronizing the canvas paint cycle from the event\n            // loop\n            desynchronized: false\n        },\n        duration: null,\n        fillParent: true,\n        forceDecode: false,\n        height: 128,\n        hideScrollbar: false,\n        hideCursor: false,\n        ignoreSilenceMode: false,\n        interact: true,\n        loopSelection: true,\n        maxCanvasWidth: 4000,\n        mediaContainer: null,\n        mediaControls: false,\n        mediaType: 'audio',\n        minPxPerSec: 20,\n        normalize: false,\n        partialRender: false,\n        pixelRatio:\n            window.devicePixelRatio || screen.deviceXDPI / screen.logicalXDPI,\n        plugins: [],\n        progressColor: '#555',\n        removeMediaElementOnDestroy: true,\n        renderer: MultiCanvas,\n        responsive: false,\n        rtl: false,\n        scrollParent: false,\n        skipLength: 2,\n        splitChannels: false,\n        splitChannelsOptions: {\n            overlay: false,\n            channelColors: {},\n            filterChannels: [],\n            relativeNormalization: false,\n            splitDragSelection: false\n        },\n        vertical: false,\n        waveColor: '#999',\n        xhr: {}\n    };\n\n    /** @private */\n    backends = {\n        MediaElement,\n        WebAudio,\n        MediaElementWebAudio\n    };\n\n    /**\n     * Instantiate this class, call its `init` function and returns it\n     *\n     * @param {WavesurferParams} params The wavesurfer parameters\n     * @return {Object} WaveSurfer instance\n     * @example const wavesurfer = WaveSurfer.create(params);\n     */\n    static create(params) {\n        const wavesurfer = new WaveSurfer(params);\n        return wavesurfer.init();\n    }\n\n    /**\n     * The library version number is available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {String}\n     * @example\n     * console.log('Using wavesurfer.js ' + WaveSurfer.VERSION);\n     */\n    static VERSION = __VERSION__;\n\n    /**\n     * Functions in the `util` property are available as a prototype property to\n     * all instances\n     *\n     * @type {Object}\n     * @example\n     * const wavesurfer = WaveSurfer.create(params);\n     * wavesurfer.util.style(myElement, { background: 'blue' });\n     */\n    util = util;\n\n    /**\n     * Functions in the `util` property are available as a static property of the\n     * WaveSurfer class\n     *\n     * @type {Object}\n     * @example\n     * WaveSurfer.util.style(myElement, { background: 'blue' });\n     */\n    static util = util;\n\n    /**\n     * Initialise wavesurfer instance\n     *\n     * @param {WavesurferParams} params Instantiation options for wavesurfer\n     * @example\n     * const wavesurfer = new WaveSurfer(params);\n     * @returns {this} Wavesurfer instance\n     */\n    constructor(params) {\n        super();\n        /**\n         * Extract relevant parameters (or defaults)\n         * @private\n         */\n        this.params = Object.assign({}, this.defaultParams, params);\n        this.params.splitChannelsOptions = Object.assign(\n            {},\n            this.defaultParams.splitChannelsOptions,\n            params.splitChannelsOptions\n        );\n        /** @private */\n        this.container =\n            'string' == typeof params.container\n                ? document.querySelector(this.params.container)\n                : this.params.container;\n\n        if (!this.container) {\n            throw new Error('Container element not found');\n        }\n\n        if (this.params.mediaContainer == null) {\n            /** @private */\n            this.mediaContainer = this.container;\n        } else if (typeof this.params.mediaContainer == 'string') {\n            /** @private */\n            this.mediaContainer = document.querySelector(\n                this.params.mediaContainer\n            );\n        } else {\n            /** @private */\n            this.mediaContainer = this.params.mediaContainer;\n        }\n\n        if (!this.mediaContainer) {\n            throw new Error('Media Container element not found');\n        }\n\n        if (this.params.maxCanvasWidth <= 1) {\n            throw new Error('maxCanvasWidth must be greater than 1');\n        } else if (this.params.maxCanvasWidth % 2 == 1) {\n            throw new Error('maxCanvasWidth must be an even number');\n        }\n\n        if (this.params.rtl === true) {\n            if (this.params.vertical === true) {\n                util.style(this.container, { transform: 'rotateX(180deg)' });\n            } else {\n                util.style(this.container, { transform: 'rotateY(180deg)' });\n            }\n        }\n\n        if (this.params.backgroundColor) {\n            this.setBackgroundColor(this.params.backgroundColor);\n        }\n\n        /**\n         * @private Used to save the current volume when muting so we can\n         * restore once unmuted\n         * @type {number}\n         */\n        this.savedVolume = 0;\n\n        /**\n         * @private The current muted state\n         * @type {boolean}\n         */\n        this.isMuted = false;\n\n        /**\n         * @private Will hold a list of event descriptors that need to be\n         * canceled on subsequent loads of audio\n         * @type {Object[]}\n         */\n        this.tmpEvents = [];\n\n        /**\n         * @private Holds any running audio downloads\n         * @type {Observer}\n         */\n        this.currentRequest = null;\n        /** @private */\n        this.arraybuffer = null;\n        /** @private */\n        this.drawer = null;\n        /** @private */\n        this.backend = null;\n        /** @private */\n        this.peakCache = null;\n\n        // cache constructor objects\n        if (typeof this.params.renderer !== 'function') {\n            throw new Error('Renderer parameter is invalid');\n        }\n        /**\n         * @private The uninitialised Drawer class\n         */\n        this.Drawer = this.params.renderer;\n        /**\n         * @private The uninitialised Backend class\n         */\n        // Back compat\n        if (this.params.backend == 'AudioElement') {\n            this.params.backend = 'MediaElement';\n        }\n\n        if (\n            (this.params.backend == 'WebAudio' ||\n                this.params.backend === 'MediaElementWebAudio') &&\n            !WebAudio.prototype.supportsWebAudio.call(null)\n        ) {\n            this.params.backend = 'MediaElement';\n        }\n        this.Backend = this.backends[this.params.backend];\n\n        /**\n         * @private map of plugin names that are currently initialised\n         */\n        this.initialisedPluginList = {};\n        /** @private */\n        this.isDestroyed = false;\n\n        /**\n         * Get the current ready status.\n         *\n         * @example const isReady = wavesurfer.isReady;\n         * @return {boolean}\n         */\n        this.isReady = false;\n\n        // responsive debounced event listener. If this.params.responsive is not\n        // set, this is never called. Use 100ms or this.params.responsive as\n        // timeout for the debounce function.\n        let prevWidth = 0;\n        this._onResize = util.debounce(\n            () => {\n                if (\n                    this.drawer.wrapper &&\n                    prevWidth != this.drawer.wrapper.clientWidth &&\n                    !this.params.scrollParent\n                ) {\n                    prevWidth = this.drawer.wrapper.clientWidth;\n                    if (prevWidth) {\n                        // redraw only if waveform container is rendered and has a width\n                        this.drawer.fireEvent('redraw');\n                    }\n                }\n            },\n            typeof this.params.responsive === 'number'\n                ? this.params.responsive\n                : 100\n        );\n\n        return this;\n    }\n\n    /**\n     * Initialise the wave\n     *\n     * @example\n     * var wavesurfer = new WaveSurfer(params);\n     * wavesurfer.init();\n     * @return {this} The wavesurfer instance\n     */\n    init() {\n        this.registerPlugins(this.params.plugins);\n        this.createDrawer();\n        this.createBackend();\n        this.createPeakCache();\n        return this;\n    }\n\n    /**\n     * Add and initialise array of plugins (if `plugin.deferInit` is falsey),\n     * this function is called in the init function of wavesurfer\n     *\n     * @param {PluginDefinition[]} plugins An array of plugin definitions\n     * @emits {WaveSurfer#plugins-registered} Called with the array of plugin definitions\n     * @return {this} The wavesurfer instance\n     */\n    registerPlugins(plugins) {\n        // first instantiate all the plugins\n        plugins.forEach(plugin => this.addPlugin(plugin));\n\n        // now run the init functions\n        plugins.forEach(plugin => {\n            // call init function of the plugin if deferInit is falsey\n            // in that case you would manually use initPlugins()\n            if (!plugin.deferInit) {\n                this.initPlugin(plugin.name);\n            }\n        });\n        this.fireEvent('plugins-registered', plugins);\n        return this;\n    }\n\n    /**\n     * Get a map of plugin names that are currently initialised\n     *\n     * @example wavesurfer.getPlugins();\n     * @return {Object} Object with plugin names\n     */\n    getActivePlugins() {\n        return this.initialisedPluginList;\n    }\n\n    /**\n     * Add a plugin object to wavesurfer\n     *\n     * @param {PluginDefinition} plugin A plugin definition\n     * @emits {WaveSurfer#plugin-added} Called with the name of the plugin that was added\n     * @example wavesurfer.addPlugin(WaveSurfer.minimap());\n     * @return {this} The wavesurfer instance\n     */\n    addPlugin(plugin) {\n        if (!plugin.name) {\n            throw new Error('Plugin does not have a name!');\n        }\n        if (!plugin.instance) {\n            throw new Error(\n                `Plugin ${plugin.name} does not have an instance property!`\n            );\n        }\n\n        // staticProps properties are applied to wavesurfer instance\n        if (plugin.staticProps) {\n            Object.keys(plugin.staticProps).forEach(pluginStaticProp => {\n                /**\n                 * Properties defined in a plugin definition's `staticProps` property are added as\n                 * staticProps properties of the WaveSurfer instance\n                 */\n                this[pluginStaticProp] = plugin.staticProps[pluginStaticProp];\n            });\n        }\n\n        const Instance = plugin.instance;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Instance.prototype[key] = util.Observer.prototype[key];\n        });\n\n        /**\n         * Instantiated plugin classes are added as a property of the wavesurfer\n         * instance\n         * @type {Object}\n         */\n        this[plugin.name] = new Instance(plugin.params || {}, this);\n        this.fireEvent('plugin-added', plugin.name);\n        return this;\n    }\n\n    /**\n     * Initialise a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-initialised\n     * @example wavesurfer.initPlugin('minimap');\n     * @return {this} The wavesurfer instance\n     */\n    initPlugin(name) {\n        if (!this[name]) {\n            throw new Error(`Plugin ${name} has not been added yet!`);\n        }\n        if (this.initialisedPluginList[name]) {\n            // destroy any already initialised plugins\n            this.destroyPlugin(name);\n        }\n        this[name].init();\n        this.initialisedPluginList[name] = true;\n        this.fireEvent('plugin-initialised', name);\n        return this;\n    }\n\n    /**\n     * Destroy a plugin\n     *\n     * @param {string} name A plugin name\n     * @emits WaveSurfer#plugin-destroyed\n     * @example wavesurfer.destroyPlugin('minimap');\n     * @returns {this} The wavesurfer instance\n     */\n    destroyPlugin(name) {\n        if (!this[name]) {\n            throw new Error(\n                `Plugin ${name} has not been added yet and cannot be destroyed!`\n            );\n        }\n        if (!this.initialisedPluginList[name]) {\n            throw new Error(\n                `Plugin ${name} is not active and cannot be destroyed!`\n            );\n        }\n        if (typeof this[name].destroy !== 'function') {\n            throw new Error(`Plugin ${name} does not have a destroy function!`);\n        }\n\n        this[name].destroy();\n        delete this.initialisedPluginList[name];\n        this.fireEvent('plugin-destroyed', name);\n        return this;\n    }\n\n    /**\n     * Destroy all initialised plugins. Convenience function to use when\n     * wavesurfer is removed\n     *\n     * @private\n     */\n    destroyAllPlugins() {\n        Object.keys(this.initialisedPluginList).forEach(name =>\n            this.destroyPlugin(name)\n        );\n    }\n\n    /**\n     * Create the drawer and draw the waveform\n     *\n     * @private\n     * @emits WaveSurfer#drawer-created\n     */\n    createDrawer() {\n        this.drawer = new this.Drawer(this.container, this.params);\n        this.drawer.init();\n        this.fireEvent('drawer-created', this.drawer);\n\n        if (this.params.responsive !== false) {\n            window.addEventListener('resize', this._onResize, true);\n            window.addEventListener('orientationchange', this._onResize, true);\n        }\n\n        this.drawer.on('redraw', () => {\n            this.drawBuffer();\n            this.drawer.progress(this.backend.getPlayedPercents());\n        });\n\n        // Click-to-seek\n        this.drawer.on('click', (e, progress) => {\n            setTimeout(() => this.seekTo(progress), 0);\n        });\n\n        // Relay the scroll event from the drawer\n        this.drawer.on('scroll', e => {\n            if (this.params.partialRender) {\n                this.drawBuffer();\n            }\n            this.fireEvent('scroll', e);\n        });\n    }\n\n    /**\n     * Create the backend\n     *\n     * @private\n     * @emits WaveSurfer#backend-created\n     */\n    createBackend() {\n        if (this.backend) {\n            this.backend.destroy();\n        }\n\n        this.backend = new this.Backend(this.params);\n        this.backend.init();\n        this.fireEvent('backend-created', this.backend);\n\n        this.backend.on('finish', () => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('finish');\n        });\n        this.backend.on('play', () => this.fireEvent('play'));\n        this.backend.on('pause', () => this.fireEvent('pause'));\n\n        this.backend.on('audioprocess', time => {\n            this.drawer.progress(this.backend.getPlayedPercents());\n            this.fireEvent('audioprocess', time);\n        });\n\n        // only needed for MediaElement and MediaElementWebAudio backend\n        if (\n            this.params.backend === 'MediaElement' ||\n            this.params.backend === 'MediaElementWebAudio'\n        ) {\n            this.backend.on('seek', () => {\n                this.drawer.progress(this.backend.getPlayedPercents());\n            });\n\n            this.backend.on('volume', () => {\n                let newVolume = this.getVolume();\n                this.fireEvent('volume', newVolume);\n\n                if (this.backend.isMuted !== this.isMuted) {\n                    this.isMuted = this.backend.isMuted;\n                    this.fireEvent('mute', this.isMuted);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create the peak cache\n     *\n     * @private\n     */\n    createPeakCache() {\n        if (this.params.partialRender) {\n            this.peakCache = new PeakCache();\n        }\n    }\n\n    /**\n     * Get the duration of the audio clip\n     *\n     * @example const duration = wavesurfer.getDuration();\n     * @return {number} Duration in seconds\n     */\n    getDuration() {\n        return this.backend.getDuration();\n    }\n\n    /**\n     * Get the current playback position\n     *\n     * @example const currentTime = wavesurfer.getCurrentTime();\n     * @return {number} Playback position in seconds\n     */\n    getCurrentTime() {\n        return this.backend.getCurrentTime();\n    }\n\n    /**\n     * Set the current play time in seconds.\n     *\n     * @param {number} seconds A positive number in seconds. E.g. 10 means 10\n     * seconds, 60 means 1 minute\n     */\n    setCurrentTime(seconds) {\n        if (seconds >= this.getDuration()) {\n            this.seekTo(1);\n        } else {\n            this.seekTo(seconds / this.getDuration());\n        }\n    }\n\n    /**\n     * Starts playback from the current position. Optional start and end\n     * measured in seconds can be used to set the range of audio to play.\n     *\n     * @param {?number} start Position to start at\n     * @param {?number} end Position to end at\n     * @emits WaveSurfer#interaction\n     * @return {Promise} Result of the backend play method\n     * @example\n     * // play from second 1 to 5\n     * wavesurfer.play(1, 5);\n     */\n    play(start, end) {\n        if (this.params.ignoreSilenceMode) {\n            // ignores device hardware silence mode\n            util.ignoreSilenceMode();\n        }\n\n        this.fireEvent('interaction', () => this.play(start, end));\n        return this.backend.play(start, end);\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} position Position (in seconds) to stop at\n     * @version 3.3.0\n     */\n    setPlayEnd(position) {\n        this.backend.setPlayEnd(position);\n    }\n\n    /**\n     * Stops and pauses playback\n     *\n     * @example wavesurfer.pause();\n     * @return {Promise} Result of the backend pause method\n     */\n    pause() {\n        if (!this.backend.isPaused()) {\n            return this.backend.pause();\n        }\n    }\n\n    /**\n     * Toggle playback\n     *\n     * @example wavesurfer.playPause();\n     * @return {Promise} Result of the backend play or pause method\n     */\n    playPause() {\n        return this.backend.isPaused() ? this.play() : this.pause();\n    }\n\n    /**\n     * Get the current playback state\n     *\n     * @example const isPlaying = wavesurfer.isPlaying();\n     * @return {boolean} False if paused, true if playing\n     */\n    isPlaying() {\n        return !this.backend.isPaused();\n    }\n\n    /**\n     * Skip backward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipBackward();\n     */\n    skipBackward(seconds) {\n        this.skip(-seconds || -this.params.skipLength);\n    }\n\n    /**\n     * Skip forward\n     *\n     * @param {?number} seconds Amount to skip back, if not specified `skipLength`\n     * is used\n     * @example wavesurfer.skipForward();\n     */\n    skipForward(seconds) {\n        this.skip(seconds || this.params.skipLength);\n    }\n\n    /**\n     * Skip a number of seconds from the current position (use a negative value\n     * to go backwards).\n     *\n     * @param {number} offset Amount to skip back or forwards\n     * @example\n     * // go back 2 seconds\n     * wavesurfer.skip(-2);\n     */\n    skip(offset) {\n        const duration = this.getDuration() || 1;\n        let position = this.getCurrentTime() || 0;\n        position = Math.max(0, Math.min(duration, position + (offset || 0)));\n        this.seekAndCenter(position / duration);\n    }\n\n    /**\n     * Seeks to a position and centers the view\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @example\n     * // seek and go to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekAndCenter(progress) {\n        this.seekTo(progress);\n        this.drawer.recenter(progress);\n    }\n\n    /**\n     * Seeks to a position\n     *\n     * @param {number} progress Between 0 (=beginning) and 1 (=end)\n     * @emits WaveSurfer#interaction\n     * @emits WaveSurfer#seek\n     * @example\n     * // seek to the middle of the audio\n     * wavesurfer.seekTo(0.5);\n     */\n    seekTo(progress) {\n        // return an error if progress is not a number between 0 and 1\n        if (\n            typeof progress !== 'number' ||\n            !isFinite(progress) ||\n            progress < 0 ||\n            progress > 1\n        ) {\n            throw new Error(\n                'Error calling wavesurfer.seekTo, parameter must be a number between 0 and 1!'\n            );\n        }\n        this.fireEvent('interaction', () => this.seekTo(progress));\n\n        const isWebAudioBackend = this.params.backend === 'WebAudio';\n        const paused = this.backend.isPaused();\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.pause();\n        }\n\n        // avoid small scrolls while paused seeking\n        const oldScrollParent = this.params.scrollParent;\n        this.params.scrollParent = false;\n        this.backend.seekTo(progress * this.getDuration());\n        this.drawer.progress(progress);\n\n        if (isWebAudioBackend && !paused) {\n            this.backend.play();\n        }\n\n        this.params.scrollParent = oldScrollParent;\n        this.fireEvent('seek', progress);\n    }\n\n    /**\n     * Stops and goes to the beginning.\n     *\n     * @example wavesurfer.stop();\n     */\n    stop() {\n        this.pause();\n        this.seekTo(0);\n        this.drawer.progress(0);\n    }\n\n    /**\n     * Sets the ID of the audio device to use for output and returns a Promise.\n     *\n     * @param {string} deviceId String value representing underlying output\n     * device\n     * @returns {Promise} `Promise` that resolves to `undefined` when there are\n     * no errors detected.\n     */\n    setSinkId(deviceId) {\n        return this.backend.setSinkId(deviceId);\n    }\n\n    /**\n     * Set the playback volume.\n     *\n     * @param {number} newVolume A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     * @emits WaveSurfer#volume\n     */\n    setVolume(newVolume) {\n        if (this.isMuted === true) {\n            this.savedVolume = newVolume;\n            return;\n        }\n        this.backend.setVolume(newVolume);\n        this.fireEvent('volume', newVolume);\n    }\n\n    /**\n     * Get the playback volume.\n     *\n     * @return {number} A value between 0 and 1, 0 being no\n     * volume and 1 being full volume.\n     */\n    getVolume() {\n        return this.backend.getVolume();\n    }\n\n    /**\n     * Set the playback rate.\n     *\n     * @param {number} rate A positive number. E.g. 0.5 means half the normal\n     * speed, 2 means double speed and so on.\n     * @example wavesurfer.setPlaybackRate(2);\n     */\n    setPlaybackRate(rate) {\n        this.backend.setPlaybackRate(rate);\n    }\n\n    /**\n     * Get the playback rate.\n     *\n     * @return {number} The current playback rate.\n     */\n    getPlaybackRate() {\n        return this.backend.getPlaybackRate();\n    }\n\n    /**\n     * Toggle the volume on and off. If not currently muted it will save the\n     * current volume value and turn the volume off. If currently muted then it\n     * will restore the volume to the saved value, and then rest the saved\n     * value.\n     *\n     * @example wavesurfer.toggleMute();\n     */\n    toggleMute() {\n        this.setMute(!this.isMuted);\n    }\n\n    /**\n     * Enable or disable muted audio\n     *\n     * @param {boolean} mute Specify `true` to mute audio.\n     * @emits WaveSurfer#volume\n     * @emits WaveSurfer#mute\n     * @example\n     * // unmute\n     * wavesurfer.setMute(false);\n     * console.log(wavesurfer.getMute()) // logs false\n     */\n    setMute(mute) {\n        // ignore all muting requests if the audio is already in that state\n        if (mute === this.isMuted) {\n            this.fireEvent('mute', this.isMuted);\n            return;\n        }\n\n        if (this.backend.setMute) {\n            // Backends such as the MediaElement backend have their own handling\n            // of mute, let them handle it.\n            this.backend.setMute(mute);\n            this.isMuted = mute;\n        } else {\n            if (mute) {\n                // If currently not muted then save current volume,\n                // turn off the volume and update the mute properties\n                this.savedVolume = this.backend.getVolume();\n                this.backend.setVolume(0);\n                this.isMuted = true;\n                this.fireEvent('volume', 0);\n            } else {\n                // If currently muted then restore to the saved volume\n                // and update the mute properties\n                this.backend.setVolume(this.savedVolume);\n                this.isMuted = false;\n                this.fireEvent('volume', this.savedVolume);\n            }\n        }\n        this.fireEvent('mute', this.isMuted);\n    }\n\n    /**\n     * Get the current mute status.\n     *\n     * @example const isMuted = wavesurfer.getMute();\n     * @return {boolean} Current mute status\n     */\n    getMute() {\n        return this.isMuted;\n    }\n\n    /**\n     * Get the list of current set filters as an array.\n     *\n     * Filters must be set with setFilters method first\n     *\n     * @return {array} List of enabled filters\n     */\n    getFilters() {\n        return this.backend.filters || [];\n    }\n\n    /**\n     * Toggles `scrollParent` and redraws\n     *\n     * @example wavesurfer.toggleScroll();\n     */\n    toggleScroll() {\n        this.params.scrollParent = !this.params.scrollParent;\n        this.drawBuffer();\n    }\n\n    /**\n     * Toggle mouse interaction\n     *\n     * @example wavesurfer.toggleInteraction();\n     */\n    toggleInteraction() {\n        this.params.interact = !this.params.interact;\n    }\n\n    /**\n     * Get the fill color of the waveform after the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its wave color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getWaveColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].waveColor;\n        }\n        return this.params.waveColor;\n    }\n\n    /**\n     * Set the fill color of the waveform after the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its wave color if splitChannels is true\n     * @example wavesurfer.setWaveColor('#ddd');\n     */\n    setWaveColor(color, channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].waveColor = color;\n        } else {\n            this.params.waveColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the fill color of the waveform behind the cursor.\n     *\n     * @param {?number} channelIdx Optional index of the channel to get its progress color if splitChannels is true\n     * @return {string|object} A CSS color string, or an array of CSS color strings.\n     */\n    getProgressColor(channelIdx = null) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            return this.params.splitChannelsOptions.channelColors[channelIdx].progressColor;\n        }\n        return this.params.progressColor;\n    }\n\n    /**\n     * Set the fill color of the waveform behind the cursor.\n     *\n     * @param {string|object} color A CSS color string, or an array of CSS color strings.\n     * @param {?number} channelIdx Optional index of the channel to set its progress color if splitChannels is true\n     * @example wavesurfer.setProgressColor('#400');\n     */\n    setProgressColor(color, channelIdx) {\n        if (this.params.splitChannelsOptions.channelColors[channelIdx]) {\n            this.params.splitChannelsOptions.channelColors[channelIdx].progressColor = color;\n        } else {\n            this.params.progressColor = color;\n        }\n        this.drawBuffer();\n    }\n\n    /**\n     * Get the background color of the waveform container.\n     *\n     * @return {string} A CSS color string.\n     */\n    getBackgroundColor() {\n        return this.params.backgroundColor;\n    }\n\n    /**\n     * Set the background color of the waveform container.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setBackgroundColor('#FF00FF');\n     */\n    setBackgroundColor(color) {\n        this.params.backgroundColor = color;\n        util.style(this.container, { background: this.params.backgroundColor });\n    }\n\n    /**\n     * Get the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @return {string} A CSS color string.\n     */\n    getCursorColor() {\n        return this.params.cursorColor;\n    }\n\n    /**\n     * Set the fill color of the cursor indicating the playhead\n     * position.\n     *\n     * @param {string} color A CSS color string.\n     * @example wavesurfer.setCursorColor('#222');\n     */\n    setCursorColor(color) {\n        this.params.cursorColor = color;\n        this.drawer.updateCursor();\n    }\n\n    /**\n     * Get the height of the waveform.\n     *\n     * @return {number} Height measured in pixels.\n     */\n    getHeight() {\n        return this.params.height;\n    }\n\n    /**\n     * Set the height of the waveform.\n     *\n     * @param {number} height Height measured in pixels.\n     * @example wavesurfer.setHeight(200);\n     */\n    setHeight(height) {\n        this.params.height = height;\n        this.drawer.setHeight(height * this.params.pixelRatio);\n        this.drawBuffer();\n    }\n\n    /**\n     * Hide channels from being drawn on the waveform if splitting channels.\n     *\n     * For example, if we want to draw only the peaks for the right stereo channel:\n     *\n     * const wavesurfer = new WaveSurfer.create({...splitChannels: true});\n     * wavesurfer.load('stereo_audio.mp3');\n     *\n     * wavesurfer.setFilteredChannel([0]); <-- hide left channel peaks.\n     *\n     * @param {array} channelIndices Channels to be filtered out from drawing.\n     * @version 4.0.0\n     */\n    setFilteredChannels(channelIndices) {\n        this.params.splitChannelsOptions.filterChannels = channelIndices;\n        this.drawBuffer();\n    }\n\n    /**\n     * Calls getPeaks() and drawPeaks()\n     * @param {WaveSurfer} wavesurfer the Wavesurfer to get/draw peaks from/to\n     * @param {number} width The width of the area that should be drawn\n     * @param {number} start The x-offset of the beginning of the area that\n     * should be rendered\n     * @param {number} end The x-offset of the end of the area that should be\n     * rendered\n     */\n    getAndDrawPeaks(wavesurfer, width, start, end) {\n        let peaks;\n        peaks = wavesurfer.backend.getPeaks(width, start, end);\n        wavesurfer.drawer.drawPeaks(peaks, width, start, end);\n    }\n\n    /**\n     * Get the correct peaks for current wave view-port and render wave\n     *\n     * @private\n     * @emits WaveSurfer#redraw\n     */\n    drawBuffer() {\n        const nominalWidth = Math.round(\n            this.getDuration() *\n                this.params.minPxPerSec *\n                this.params.pixelRatio\n        );\n        const parentWidth = this.drawer.getWidth();\n        let width = nominalWidth;\n        // always start at 0 after zooming for scrolling : issue redraw left part\n        let start = 0;\n        let end = Math.max(start + parentWidth, width);\n        // Fill container\n        if (\n            this.params.fillParent &&\n            (!this.params.scrollParent || nominalWidth < parentWidth)\n        ) {\n            width = parentWidth;\n            start = 0;\n            end = width;\n        }\n\n        let peaks;\n        if (this.params.partialRender) {\n            const newRanges = this.peakCache.addRangeToPeakCache(\n                width,\n                start,\n                end\n            );\n            let i;\n            for (i = 0; i < newRanges.length; i++) {\n                peaks = this.backend.getPeaks(\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n                this.drawer.drawPeaks(\n                    peaks,\n                    width,\n                    newRanges[i][0],\n                    newRanges[i][1]\n                );\n            }\n        } else {\n            peaks = this.backend.getPeaks(width, start, end);\n            this.drawer.drawPeaks(peaks, width, start, end);\n        }\n        this.fireEvent('redraw', peaks, width);\n    }\n\n    /**\n     * Horizontally zooms the waveform in and out. It also changes the parameter\n     * `minPxPerSec` and enables the `scrollParent` option. Calling the function\n     * with a falsey parameter will reset the zoom state.\n     *\n     * @param {?number} pxPerSec Number of horizontal pixels per second of\n     * audio, if none is set the waveform returns to unzoomed state\n     * @emits WaveSurfer#zoom\n     * @example wavesurfer.zoom(20);\n     */\n    zoom(pxPerSec) {\n        if (!pxPerSec) {\n            this.params.minPxPerSec = this.defaultParams.minPxPerSec;\n            this.params.scrollParent = false;\n        } else {\n            this.params.minPxPerSec = pxPerSec;\n            this.params.scrollParent = true;\n        }\n\n        this.drawBuffer();\n        this.drawer.progress(this.backend.getPlayedPercents());\n\n        this.drawer.recenter(this.getCurrentTime() / this.getDuration());\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Call this function while moving the zoom slider to stretch the canvases\n     * of the wave without recalculating\n     *\n     * @param {Number} pxPerSec value returned from the zoom slider\n     */\n    zooming(pxPerSec) {\n        //Calculate the new width, this cannot be smaller than the parent container width\n        let desiredWidth = Math.round(this.getDuration() * pxPerSec * this.params.pixelRatio);\n        let parentWidth = this.drawer.getWidth();\n        desiredWidth = Math.max(parentWidth, desiredWidth);\n\n        //Stretch canvases\n        this.drawer.stretchCanvases(desiredWidth, this.backend.getPlayedPercents());\n\n        this.fireEvent('zoom', pxPerSec);\n    }\n\n    /**\n     * Decode buffer and load\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer Buffer to process\n     */\n    loadArrayBuffer(arraybuffer) {\n        this.decodeArrayBuffer(arraybuffer, data => {\n            if (!this.isDestroyed) {\n                this.loadDecodedBuffer(data);\n            }\n        });\n    }\n\n    /**\n     * Directly load an externally decoded AudioBuffer\n     *\n     * @private\n     * @param {AudioBuffer} buffer Buffer to process\n     * @emits WaveSurfer#ready\n     */\n    loadDecodedBuffer(buffer) {\n        this.backend.load(buffer);\n        this.drawBuffer();\n        this.isReady = true;\n        this.fireEvent('ready');\n    }\n\n    /**\n     * Loads audio data from a Blob or File object\n     *\n     * @param {Blob|File} blob Audio data\n     * @example\n     */\n    loadBlob(blob) {\n        // Create file reader\n        const reader = new FileReader();\n        reader.addEventListener('progress', e => this.onProgress(e));\n        reader.addEventListener('load', e =>\n            this.loadArrayBuffer(e.target.result)\n        );\n        reader.addEventListener('error', () =>\n            this.fireEvent('error', 'Error reading file')\n        );\n        reader.readAsArrayBuffer(blob);\n        this.empty();\n    }\n\n    /**\n     * Loads audio and re-renders the waveform.\n     *\n     * @param {string|HTMLMediaElement} url The url of the audio file or the\n     * audio element with the audio\n     * @param {number[]|Number.<Array[]>} peaks Wavesurfer does not have to decode\n     * the audio to render the waveform if this is specified\n     * @param {?string} preload (Use with backend `MediaElement` and `MediaElementWebAudio`)\n     * `'none'|'metadata'|'auto'` Preload attribute for the media element\n     * @param {?number} duration The duration of the audio. This is used to\n     * render the peaks data in the correct size for the audio duration (as\n     * befits the current `minPxPerSec` and zoom value) without having to decode\n     * the audio.\n     * @returns {void}\n     * @throws Will throw an error if the `url` argument is empty.\n     * @example\n     * // uses fetch or media element to load file (depending on backend)\n     * wavesurfer.load('http://example.com/demo.wav');\n     *\n     * // setting preload attribute with media element backend and supplying\n     * // peaks\n     * wavesurfer.load(\n     *   'http://example.com/demo.wav',\n     *   [0.0218, 0.0183, 0.0165, 0.0198, 0.2137, 0.2888],\n     *   true\n     * );\n     */\n    load(url, peaks, preload, duration) {\n        if (!url) {\n            throw new Error('url parameter cannot be empty');\n        }\n        this.empty();\n        if (preload) {\n            // check whether the preload attribute will be usable and if not log\n            // a warning listing the reasons why not and nullify the variable\n            const preloadIgnoreReasons = {\n                \"Preload is not 'auto', 'none' or 'metadata'\":\n                    ['auto', 'metadata', 'none'].indexOf(preload) === -1,\n                'Peaks are not provided': !peaks,\n                \"Backend is not of type 'MediaElement' or 'MediaElementWebAudio'\":\n                    ['MediaElement', 'MediaElementWebAudio'].indexOf(\n                        this.params.backend\n                    ) === -1,\n                'Url is not of type string': typeof url !== 'string'\n            };\n            const activeReasons = Object.keys(preloadIgnoreReasons).filter(\n                reason => preloadIgnoreReasons[reason]\n            );\n            if (activeReasons.length) {\n                // eslint-disable-next-line no-console\n                console.warn(\n                    'Preload parameter of wavesurfer.load will be ignored because:\\n\\t- ' +\n                        activeReasons.join('\\n\\t- ')\n                );\n                // stop invalid values from being used\n                preload = null;\n            }\n        }\n\n        // loadBuffer(url, peaks, duration) requires that url is a string\n        // but users can pass in a HTMLMediaElement to WaveSurfer\n        if (this.params.backend === 'WebAudio' && url instanceof HTMLMediaElement) {\n            url = url.src;\n        }\n\n        switch (this.params.backend) {\n            case 'WebAudio':\n                return this.loadBuffer(url, peaks, duration);\n            case 'MediaElement':\n            case 'MediaElementWebAudio':\n                return this.loadMediaElement(url, peaks, preload, duration);\n        }\n    }\n\n    /**\n     * Loads audio using Web Audio buffer backend.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string} url URL of audio file\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Optional duration of audio file\n     * @returns {void}\n     */\n    loadBuffer(url, peaks, duration) {\n        const load = action => {\n            if (action) {\n                this.tmpEvents.push(this.once('ready', action));\n            }\n            return this.getArrayBuffer(url, data => this.loadArrayBuffer(data));\n        };\n\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n            this.tmpEvents.push(this.once('interaction', load));\n        } else {\n            return load();\n        }\n    }\n\n    /**\n     * Either create a media element, or load an existing media element.\n     *\n     * @private\n     * @emits WaveSurfer#waveform-ready\n     * @param {string|HTMLMediaElement} urlOrElt Either a path to a media file, or an\n     * existing HTML5 Audio/Video Element\n     * @param {number[]|Number.<Array[]>} peaks Array of peaks. Required to bypass web audio\n     * dependency\n     * @param {?boolean} preload Set to true if the preload attribute of the\n     * audio element should be enabled\n     * @param {?number} duration Optional duration of audio file\n     */\n    loadMediaElement(urlOrElt, peaks, preload, duration) {\n        let url = urlOrElt;\n\n        if (typeof urlOrElt === 'string') {\n            this.backend.load(url, this.mediaContainer, peaks, preload);\n        } else {\n            const elt = urlOrElt;\n            this.backend.loadElt(elt, peaks);\n\n            // If peaks are not provided,\n            // url = element.src so we can get peaks with web audio\n            url = elt.src;\n        }\n\n        this.tmpEvents.push(\n            this.backend.once('canplay', () => {\n                // ignore when backend was already destroyed\n                if (!this.backend.destroyed) {\n                    this.drawBuffer();\n                    this.isReady = true;\n                    this.fireEvent('ready');\n                }\n            }),\n            this.backend.once('error', err => this.fireEvent('error', err))\n        );\n\n        // If peaks are provided, render them and fire the `waveform-ready` event.\n        if (peaks) {\n            this.backend.setPeaks(peaks, duration);\n            this.drawBuffer();\n            this.fireEvent('waveform-ready');\n        }\n\n        // If no pre-decoded peaks are provided, or are provided with\n        // forceDecode flag, attempt to download the audio file and decode it\n        // with Web Audio.\n        if (\n            (!peaks || this.params.forceDecode) &&\n            this.backend.supportsWebAudio()\n        ) {\n            this.getArrayBuffer(url, arraybuffer => {\n                this.decodeArrayBuffer(arraybuffer, buffer => {\n                    this.backend.buffer = buffer;\n                    this.backend.setPeaks(null);\n                    this.drawBuffer();\n                    this.fireEvent('waveform-ready');\n                });\n            });\n        }\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {Object} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete\n     */\n    decodeArrayBuffer(arraybuffer, callback) {\n        if (!this.isDestroyed) {\n            this.arraybuffer = arraybuffer;\n            this.backend.decodeArrayBuffer(\n                arraybuffer,\n                data => {\n                    // Only use the decoded data if we haven't been destroyed or\n                    // another decode started in the meantime\n                    if (!this.isDestroyed && this.arraybuffer == arraybuffer) {\n                        callback(data);\n                        this.arraybuffer = null;\n                    }\n                },\n                () => this.fireEvent('error', 'Error decoding audiobuffer')\n            );\n        }\n    }\n\n    /**\n     * Load an array buffer using fetch and pass the result to a callback\n     *\n     * @param {string} url The URL of the file object\n     * @param {function} callback The function to call on complete\n     * @returns {util.fetchFile} fetch call\n     * @private\n     */\n    getArrayBuffer(url, callback) {\n        let options = Object.assign(\n            {\n                url: url,\n                responseType: 'arraybuffer'\n            },\n            this.params.xhr\n        );\n        const request = util.fetchFile(options);\n\n        this.currentRequest = request;\n\n        this.tmpEvents.push(\n            request.on('progress', e => {\n                this.onProgress(e);\n            }),\n            request.on('success', data => {\n                callback(data);\n                this.currentRequest = null;\n            }),\n            request.on('error', e => {\n                this.fireEvent('error', e);\n                this.currentRequest = null;\n            })\n        );\n\n        return request;\n    }\n\n    /**\n     * Called while the audio file is loading\n     *\n     * @private\n     * @param {Event} e Progress event\n     * @emits WaveSurfer#loading\n     */\n    onProgress(e) {\n        let percentComplete;\n        if (e.lengthComputable) {\n            percentComplete = e.loaded / e.total;\n        } else {\n            // Approximate progress with an asymptotic\n            // function, and assume downloads in the 1-3 MB range.\n            percentComplete = e.loaded / (e.loaded + 1000000);\n        }\n        this.fireEvent('loading', Math.round(percentComplete * 100), e.target);\n    }\n\n    /**\n     * Exports PCM data into a JSON array and optionally opens in a new window\n     * as valid JSON Blob instance.\n     *\n     * @param {number} length=1024 The scale in which to export the peaks\n     * @param {number} accuracy=10000\n     * @param {?boolean} noWindow Set to true to disable opening a new\n     * window with the JSON\n     * @param {number} start Start index\n     * @param {number} end End index\n     * @return {Promise} Promise that resolves with array of peaks\n     */\n    exportPCM(length, accuracy, noWindow, start, end) {\n        length = length || 1024;\n        start = start || 0;\n        accuracy = accuracy || 10000;\n        noWindow = noWindow || false;\n        const peaks = this.backend.getPeaks(length, start, end);\n        const arr = [].map.call(\n            peaks,\n            val => Math.round(val * accuracy) / accuracy\n        );\n\n        return new Promise((resolve, reject) => {\n            if (!noWindow){\n                const blobJSON = new Blob(\n                    [JSON.stringify(arr)],\n                    {type: 'application/json;charset=utf-8'}\n                );\n                const objURL = URL.createObjectURL(blobJSON);\n                window.open(objURL);\n                URL.revokeObjectURL(objURL);\n            }\n            resolve(arr);\n        });\n    }\n\n    /**\n     * Save waveform image as data URI.\n     *\n     * The default format is `image/png`. Other supported types are\n     * `image/jpeg` and `image/webp`.\n     *\n     * @param {string} format='image/png' A string indicating the image format.\n     * The default format type is `image/png`.\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\n     * quality to use for image formats that use lossy compression such as\n     * `image/jpeg` and `image/webp`.\n     * @param {string} type Image data type to return. Either `dataURL` (default)\n     * or `blob`.\n     * @return {string|string[]|Promise} When using `dataURL` type this returns\n     * a single data URL or an array of data URLs, one for each canvas. When using\n     * `blob` type this returns a `Promise` resolving with an array of `Blob`\n     * instances, one for each canvas.\n     */\n    exportImage(format, quality, type) {\n        if (!format) {\n            format = 'image/png';\n        }\n        if (!quality) {\n            quality = 1;\n        }\n        if (!type) {\n            type = 'dataURL';\n        }\n\n        return this.drawer.getImage(format, quality, type);\n    }\n\n    /**\n     * Cancel any fetch request currently in progress\n     */\n    cancelAjax() {\n        if (this.currentRequest && this.currentRequest.controller) {\n            // If the current request has a ProgressHandler, then its ReadableStream might need to be cancelled too\n            // See: Wavesurfer issue #2042\n            // See Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n            if (this.currentRequest._reader) {\n                // Ignoring exceptions thrown by call to cancel()\n                this.currentRequest._reader.cancel().catch(err => {});\n            }\n\n            this.currentRequest.controller.abort();\n            this.currentRequest = null;\n        }\n    }\n\n    /**\n     * @private\n     */\n    clearTmpEvents() {\n        this.tmpEvents.forEach(e => e.un());\n    }\n\n    /**\n     * Display empty waveform.\n     */\n    empty() {\n        if (!this.backend.isPaused()) {\n            this.stop();\n            this.backend.disconnectSource();\n        }\n        this.isReady = false;\n        this.cancelAjax();\n        this.clearTmpEvents();\n\n        // empty drawer\n        this.drawer.progress(0);\n        this.drawer.setWidth(0);\n        this.drawer.drawPeaks({ length: this.drawer.getWidth() }, 0);\n    }\n\n    /**\n     * Remove events, elements and disconnect WebAudio nodes.\n     *\n     * @emits WaveSurfer#destroy\n     */\n    destroy() {\n        this.destroyAllPlugins();\n        this.fireEvent('destroy');\n        this.cancelAjax();\n        this.clearTmpEvents();\n        this.unAll();\n        if (this.params.responsive !== false) {\n            window.removeEventListener('resize', this._onResize, true);\n            window.removeEventListener(\n                'orientationchange',\n                this._onResize,\n                true\n            );\n        }\n        if (this.backend) {\n            this.backend.destroy();\n            // clears memory usage\n            this.backend = null;\n        }\n        if (this.drawer) {\n            this.drawer.destroy();\n        }\n        this.isDestroyed = true;\n        this.isReady = false;\n        this.arraybuffer = null;\n    }\n}\n","import * as util from './util';\n\n// using constants to prevent someone writing the string wrong\nconst PLAYING = 'playing';\nconst PAUSED = 'paused';\nconst FINISHED = 'finished';\n\n/**\n * WebAudio backend\n *\n * @extends {Observer}\n */\nexport default class WebAudio extends util.Observer {\n    /** scriptBufferSize: size of the processing buffer */\n    static scriptBufferSize = 256;\n    /** audioContext: allows to process audio with WebAudio API */\n    audioContext = null;\n    /** @private */\n    offlineAudioContext = null;\n    /** @private */\n    stateBehaviors = {\n        [PLAYING]: {\n            init() {\n                this.addOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition + this.getPlayedTime();\n            }\n        },\n        [PAUSED]: {\n            init() {\n                this.removeOnAudioProcess();\n            },\n            getPlayedPercents() {\n                const duration = this.getDuration();\n                return this.getCurrentTime() / duration || 0;\n            },\n            getCurrentTime() {\n                return this.startPosition;\n            }\n        },\n        [FINISHED]: {\n            init() {\n                this.removeOnAudioProcess();\n                this.fireEvent('finish');\n            },\n            getPlayedPercents() {\n                return 1;\n            },\n            getCurrentTime() {\n                return this.getDuration();\n            }\n        }\n    };\n\n    /**\n     * Does the browser support this backend\n     *\n     * @return {boolean} Whether or not this browser supports this backend\n     */\n    supportsWebAudio() {\n        return !!(window.AudioContext || window.webkitAudioContext);\n    }\n\n    /**\n     * Get the audio context used by this backend or create one\n     *\n     * @return {AudioContext} Existing audio context, or creates a new one\n     */\n    getAudioContext() {\n        if (!window.WaveSurferAudioContext) {\n            window.WaveSurferAudioContext = new (window.AudioContext ||\n                window.webkitAudioContext)();\n        }\n        return window.WaveSurferAudioContext;\n    }\n\n    /**\n     * Get the offline audio context used by this backend or create one\n     *\n     * @param {number} sampleRate The sample rate to use\n     * @return {OfflineAudioContext} Existing offline audio context, or creates\n     * a new one\n     */\n    getOfflineAudioContext(sampleRate) {\n        if (!window.WaveSurferOfflineAudioContext) {\n            window.WaveSurferOfflineAudioContext = new (window.OfflineAudioContext ||\n                window.webkitOfflineAudioContext)(1, 2, sampleRate);\n        }\n        return window.WaveSurferOfflineAudioContext;\n    }\n\n    /**\n     * Construct the backend\n     *\n     * @param {WavesurferParams} params Wavesurfer parameters\n     */\n    constructor(params) {\n        super();\n        /** @private */\n        this.params = params;\n        /** ac: Audio Context instance */\n        this.ac =\n            params.audioContext ||\n            (this.supportsWebAudio() ? this.getAudioContext() : {});\n        /**@private */\n        this.lastPlay = this.ac.currentTime;\n        /** @private */\n        this.startPosition = 0;\n        /** @private */\n        this.scheduledPause = null;\n        /** @private */\n        this.states = {\n            [PLAYING]: Object.create(this.stateBehaviors[PLAYING]),\n            [PAUSED]: Object.create(this.stateBehaviors[PAUSED]),\n            [FINISHED]: Object.create(this.stateBehaviors[FINISHED])\n        };\n        /** @private */\n        this.buffer = null;\n        /** @private */\n        this.filters = [];\n        /** gainNode: allows to control audio volume */\n        this.gainNode = null;\n        /** @private */\n        this.mergedPeaks = null;\n        /** @private */\n        this.offlineAc = null;\n        /** @private */\n        this.peaks = null;\n        /** @private */\n        this.playbackRate = 1;\n        /** analyser: provides audio analysis information */\n        this.analyser = null;\n        /** scriptNode: allows processing audio */\n        this.scriptNode = null;\n        /** @private */\n        this.source = null;\n        /** @private */\n        this.splitPeaks = [];\n        /** @private */\n        this.state = null;\n        /** @private */\n        this.explicitDuration = params.duration;\n        /** @private */\n        this.sinkStreamDestination = null;\n        /** @private */\n        this.sinkAudioElement = null;\n        /**\n         * Boolean indicating if the backend was destroyed.\n         */\n        this.destroyed = false;\n    }\n\n    /**\n     * Initialise the backend, called in `wavesurfer.createBackend()`\n     */\n    init() {\n        this.createVolumeNode();\n        this.createScriptNode();\n        this.createAnalyserNode();\n\n        this.setState(PAUSED);\n        this.setPlaybackRate(this.params.audioRate);\n        this.setLength(0);\n    }\n\n    /** @private */\n    disconnectFilters() {\n        if (this.filters) {\n            this.filters.forEach(filter => {\n                filter && filter.disconnect();\n            });\n            this.filters = null;\n            // Reconnect direct path\n            this.analyser.connect(this.gainNode);\n        }\n    }\n\n    /**\n     * @private\n     *\n     * @param {string} state The new state\n     */\n    setState(state) {\n        if (this.state !== this.states[state]) {\n            this.state = this.states[state];\n            this.state.init.call(this);\n        }\n    }\n\n    /**\n     * Unpacked `setFilters()`\n     *\n     * @param {...AudioNode} filters One or more filters to set\n     */\n    setFilter(...filters) {\n        this.setFilters(filters);\n    }\n\n    /**\n     * Insert custom Web Audio nodes into the graph\n     *\n     * @param {AudioNode[]} filters Packed filters array\n     * @example\n     * const lowpass = wavesurfer.backend.ac.createBiquadFilter();\n     * wavesurfer.backend.setFilter(lowpass);\n     */\n    setFilters(filters) {\n        // Remove existing filters\n        this.disconnectFilters();\n\n        // Insert filters if filter array not empty\n        if (filters && filters.length) {\n            this.filters = filters;\n\n            // Disconnect direct path before inserting filters\n            this.analyser.disconnect();\n\n            // Connect each filter in turn\n            filters\n                .reduce((prev, curr) => {\n                    prev.connect(curr);\n                    return curr;\n                }, this.analyser)\n                .connect(this.gainNode);\n        }\n    }\n    /** Create ScriptProcessorNode to process audio */\n    createScriptNode() {\n        if (this.params.audioScriptProcessor) {\n            this.scriptNode = this.params.audioScriptProcessor;\n        } else {\n            if (this.ac.createScriptProcessor) {\n                this.scriptNode = this.ac.createScriptProcessor(\n                    WebAudio.scriptBufferSize\n                );\n            } else {\n                this.scriptNode = this.ac.createJavaScriptNode(\n                    WebAudio.scriptBufferSize\n                );\n            }\n        }\n        this.scriptNode.connect(this.ac.destination);\n    }\n\n    /** @private */\n    addOnAudioProcess() {\n        this.scriptNode.onaudioprocess = () => {\n            const time = this.getCurrentTime();\n\n            if (time >= this.getDuration()) {\n                this.setState(FINISHED);\n                this.fireEvent('pause');\n            } else if (time >= this.scheduledPause) {\n                this.pause();\n            } else if (this.state === this.states[PLAYING]) {\n                this.fireEvent('audioprocess', time);\n            }\n        };\n    }\n\n    /** @private */\n    removeOnAudioProcess() {\n        this.scriptNode.onaudioprocess = null;\n    }\n    /** Create analyser node to perform audio analysis */\n    createAnalyserNode() {\n        this.analyser = this.ac.createAnalyser();\n        this.analyser.connect(this.gainNode);\n    }\n\n    /**\n     * Create the gain node needed to control the playback volume.\n     *\n     */\n    createVolumeNode() {\n        // Create gain node using the AudioContext\n        if (this.ac.createGain) {\n            this.gainNode = this.ac.createGain();\n        } else {\n            this.gainNode = this.ac.createGainNode();\n        }\n        // Add the gain node to the graph\n        this.gainNode.connect(this.ac.destination);\n    }\n\n    /**\n     * Set the sink id for the media player\n     *\n     * @param {string} deviceId String value representing audio device id.\n     * @returns {Promise} A Promise that resolves to `undefined` when there\n     * are no errors.\n     */\n    setSinkId(deviceId) {\n        if (deviceId) {\n            /**\n             * The webaudio API doesn't currently support setting the device\n             * output. Here we create an HTMLAudioElement, connect the\n             * webaudio stream to that element and setSinkId there.\n             */\n            if (!this.sinkAudioElement) {\n                this.sinkAudioElement = new window.Audio();\n                // autoplay is necessary since we're not invoking .play()\n                this.sinkAudioElement.autoplay = true;\n            }\n            if (!this.sinkAudioElement.setSinkId) {\n                return Promise.reject(\n                    new Error('setSinkId is not supported in your browser')\n                );\n            }\n            if (!this.sinkStreamDestination) {\n                this.sinkStreamDestination = this.ac.createMediaStreamDestination();\n            }\n            this.gainNode.disconnect();\n            this.gainNode.connect(this.sinkStreamDestination);\n            this.sinkAudioElement.srcObject = this.sinkStreamDestination.stream;\n\n            return this.sinkAudioElement.setSinkId(deviceId);\n        } else {\n            return Promise.reject(new Error('Invalid deviceId: ' + deviceId));\n        }\n    }\n\n    /**\n     * Set the audio volume\n     *\n     * @param {number} value A floating point value between 0 and 1.\n     */\n    setVolume(value) {\n        this.gainNode.gain.setValueAtTime(value, this.ac.currentTime);\n    }\n\n    /**\n     * Get the current volume\n     *\n     * @return {number} value A floating point value between 0 and 1.\n     */\n    getVolume() {\n        return this.gainNode.gain.value;\n    }\n\n    /**\n     * Decode an array buffer and pass data to a callback\n     *\n     * @private\n     * @param {ArrayBuffer} arraybuffer The array buffer to decode\n     * @param {function} callback The function to call on complete.\n     * @param {function} errback The function to call on error.\n     */\n    decodeArrayBuffer(arraybuffer, callback, errback) {\n        if (!this.offlineAc) {\n            this.offlineAc = this.getOfflineAudioContext(\n                this.ac && this.ac.sampleRate ? this.ac.sampleRate : 44100\n            );\n        }\n        if ('webkitAudioContext' in window) {\n            // Safari: no support for Promise-based decodeAudioData enabled\n            // Enable it in Safari using the Experimental Features > Modern WebAudio API option\n            this.offlineAc.decodeAudioData(\n                arraybuffer,\n                data => callback(data),\n                errback\n            );\n        } else {\n            this.offlineAc.decodeAudioData(arraybuffer).then(\n                (data) => callback(data)\n            ).catch(\n                (err) => errback(err)\n            );\n        }\n    }\n\n    /**\n     * Set pre-decoded peaks\n     *\n     * @param {number[]|Number.<Array[]>} peaks Peaks data\n     * @param {?number} duration Explicit duration\n     */\n    setPeaks(peaks, duration) {\n        if (duration != null) {\n            this.explicitDuration = duration;\n        }\n        this.peaks = peaks;\n    }\n\n    /**\n     * Set the rendered length (different from the length of the audio)\n     *\n     * @param {number} length The rendered length\n     */\n    setLength(length) {\n        // No resize, we can preserve the cached peaks.\n        if (this.mergedPeaks && length == 2 * this.mergedPeaks.length - 1 + 2) {\n            return;\n        }\n\n        this.splitPeaks = [];\n        this.mergedPeaks = [];\n        // Set the last element of the sparse array so the peak arrays are\n        // appropriately sized for other calculations.\n        const channels = this.buffer ? this.buffer.numberOfChannels : 1;\n        let c;\n        for (c = 0; c < channels; c++) {\n            this.splitPeaks[c] = [];\n            this.splitPeaks[c][2 * (length - 1)] = 0;\n            this.splitPeaks[c][2 * (length - 1) + 1] = 0;\n        }\n        this.mergedPeaks[2 * (length - 1)] = 0;\n        this.mergedPeaks[2 * (length - 1) + 1] = 0;\n    }\n\n    /**\n     * Compute the max and min value of the waveform when broken into <length> subranges.\n     *\n     * @param {number} length How many subranges to break the waveform into.\n     * @param {number} first First sample in the required range.\n     * @param {number} last Last sample in the required range.\n     * @return {number[]|Number.<Array[]>} Array of 2*<length> peaks or array of arrays of\n     * peaks consisting of (max, min) values for each subrange.\n     */\n    getPeaks(length, first, last) {\n        if (this.peaks) {\n            return this.peaks;\n        }\n        if (!this.buffer) {\n            return [];\n        }\n\n        first = first || 0;\n        last = last || length - 1;\n\n        this.setLength(length);\n\n        if (!this.buffer) {\n            return this.params.splitChannels\n                ? this.splitPeaks\n                : this.mergedPeaks;\n        }\n\n        /**\n         * The following snippet fixes a buffering data issue on the Safari\n         * browser which returned undefined It creates the missing buffer based\n         * on 1 channel, 4096 samples and the sampleRate from the current\n         * webaudio context 4096 samples seemed to be the best fit for rendering\n         * will review this code once a stable version of Safari TP is out\n         */\n        if (!this.buffer.length) {\n            const newBuffer = this.createBuffer(1, 4096, this.sampleRate);\n            this.buffer = newBuffer.buffer;\n        }\n\n        const sampleSize = this.buffer.length / length;\n        const sampleStep = ~~(sampleSize / 10) || 1;\n        const channels = this.buffer.numberOfChannels;\n        let c;\n\n        for (c = 0; c < channels; c++) {\n            const peaks = this.splitPeaks[c];\n            const chan = this.buffer.getChannelData(c);\n            let i;\n\n            for (i = first; i <= last; i++) {\n                const start = ~~(i * sampleSize);\n                const end = ~~(start + sampleSize);\n                /**\n                 * Initialize the max and min to the first sample of this\n                 * subrange, so that even if the samples are entirely\n                 * on one side of zero, we still return the true max and\n                 * min values in the subrange.\n                 */\n                let min = chan[start];\n                let max = min;\n                let j;\n\n                for (j = start; j < end; j += sampleStep) {\n                    const value = chan[j];\n\n                    if (value > max) {\n                        max = value;\n                    }\n\n                    if (value < min) {\n                        min = value;\n                    }\n                }\n\n                peaks[2 * i] = max;\n                peaks[2 * i + 1] = min;\n\n                if (c == 0 || max > this.mergedPeaks[2 * i]) {\n                    this.mergedPeaks[2 * i] = max;\n                }\n\n                if (c == 0 || min < this.mergedPeaks[2 * i + 1]) {\n                    this.mergedPeaks[2 * i + 1] = min;\n                }\n            }\n        }\n\n        return this.params.splitChannels ? this.splitPeaks : this.mergedPeaks;\n    }\n\n    /**\n     * Get the position from 0 to 1\n     *\n     * @return {number} Position\n     */\n    getPlayedPercents() {\n        return this.state.getPlayedPercents.call(this);\n    }\n\n    /** @private */\n    disconnectSource() {\n        if (this.source) {\n            this.source.disconnect();\n        }\n    }\n    /**\n     * Destroy all references with WebAudio, disconnecting audio nodes and closing Audio Context\n     */\n    destroyWebAudio() {\n        this.disconnectFilters();\n        this.disconnectSource();\n        this.gainNode.disconnect();\n        this.scriptNode.disconnect();\n        this.analyser.disconnect();\n\n        // close the audioContext if closeAudioContext option is set to true\n        if (this.params.closeAudioContext) {\n            // check if browser supports AudioContext.close()\n            if (\n                typeof this.ac.close === 'function' &&\n                this.ac.state != 'closed'\n            ) {\n                this.ac.close();\n            }\n            // clear the reference to the audiocontext\n            this.ac = null;\n            // clear the actual audiocontext, either passed as param or the\n            // global singleton\n            if (!this.params.audioContext) {\n                window.WaveSurferAudioContext = null;\n            } else {\n                this.params.audioContext = null;\n            }\n            // clear the offlineAudioContext\n            window.WaveSurferOfflineAudioContext = null;\n        }\n\n        // disconnect resources used by setSinkId\n        if (this.sinkStreamDestination) {\n            this.sinkAudioElement.pause();\n            this.sinkAudioElement.srcObject = null;\n            this.sinkStreamDestination.disconnect();\n            this.sinkStreamDestination = null;\n        }\n    }\n    /**\n     * This is called when wavesurfer is destroyed\n     */\n    destroy() {\n        if (!this.isPaused()) {\n            this.pause();\n        }\n        this.unAll();\n        this.buffer = null;\n        this.destroyed = true;\n\n        this.destroyWebAudio();\n    }\n\n    /**\n     * Loaded a decoded audio buffer\n     *\n     * @param {Object} buffer Decoded audio buffer to load\n     */\n    load(buffer) {\n        this.startPosition = 0;\n        this.lastPlay = this.ac.currentTime;\n        this.buffer = buffer;\n        this.createSource();\n    }\n\n    /** @private */\n    createSource() {\n        this.disconnectSource();\n        this.source = this.ac.createBufferSource();\n\n        // adjust for old browsers\n        this.source.start = this.source.start || this.source.noteGrainOn;\n        this.source.stop = this.source.stop || this.source.noteOff;\n\n        this.setPlaybackRate(this.playbackRate);\n        this.source.buffer = this.buffer;\n        this.source.connect(this.analyser);\n    }\n\n    /**\n     * @private\n     *\n     * some browsers require an explicit call to #resume before they will play back audio\n     */\n    resumeAudioContext() {\n        if (this.ac.state == 'suspended') {\n            this.ac.resume && this.ac.resume();\n        }\n    }\n\n    /**\n     * Used by `wavesurfer.isPlaying()` and `wavesurfer.playPause()`\n     *\n     * @return {boolean} Whether or not this backend is currently paused\n     */\n    isPaused() {\n        return this.state !== this.states[PLAYING];\n    }\n\n    /**\n     * Used by `wavesurfer.getDuration()`\n     *\n     * @return {number} Duration of loaded buffer\n     */\n    getDuration() {\n        if (this.explicitDuration) {\n            return this.explicitDuration;\n        }\n        if (!this.buffer) {\n            return 0;\n        }\n        return this.buffer.duration;\n    }\n\n    /**\n     * Used by `wavesurfer.seekTo()`\n     *\n     * @param {number} start Position to start at in seconds\n     * @param {number} end Position to end at in seconds\n     * @return {{start: number, end: number}} Object containing start and end\n     * positions\n     */\n    seekTo(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        this.scheduledPause = null;\n\n        if (start == null) {\n            start = this.getCurrentTime();\n            if (start >= this.getDuration()) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.getDuration();\n        }\n\n        this.startPosition = start;\n        this.lastPlay = this.ac.currentTime;\n\n        if (this.state === this.states[FINISHED]) {\n            this.setState(PAUSED);\n        }\n\n        return {\n            start: start,\n            end: end\n        };\n    }\n\n    /**\n     * Get the playback position in seconds\n     *\n     * @return {number} The playback position in seconds\n     */\n    getPlayedTime() {\n        return (this.ac.currentTime - this.lastPlay) * this.playbackRate;\n    }\n\n    /**\n     * Plays the loaded audio region.\n     *\n     * @param {number} start Start offset in seconds, relative to the beginning\n     * of a clip.\n     * @param {number} end When to stop relative to the beginning of a clip.\n     */\n    play(start, end) {\n        if (!this.buffer) {\n            return;\n        }\n\n        // need to re-create source on each playback\n        this.createSource();\n\n        const adjustedTime = this.seekTo(start, end);\n\n        start = adjustedTime.start;\n        end = adjustedTime.end;\n\n        this.scheduledPause = end;\n\n        this.source.start(0, start);\n\n        this.resumeAudioContext();\n\n        this.setState(PLAYING);\n\n        this.fireEvent('play');\n    }\n\n    /**\n     * Pauses the loaded audio.\n     */\n    pause() {\n        this.scheduledPause = null;\n\n        this.startPosition += this.getPlayedTime();\n        try {\n            this.source && this.source.stop(0);\n        } catch (err) {\n            // Calling stop can throw the following 2 errors:\n            // - RangeError (The value specified for when is negative.)\n            // - InvalidStateNode (The node has not been started by calling start().)\n            // We can safely ignore both errors, because:\n            // - The range is surely correct\n            // - The node might not have been started yet, in which case we just want to carry on without causing any trouble.\n        }\n\n        this.setState(PAUSED);\n\n        this.fireEvent('pause');\n    }\n\n    /**\n     * Returns the current time in seconds relative to the audio-clip's\n     * duration.\n     *\n     * @return {number} The current time in seconds\n     */\n    getCurrentTime() {\n        return this.state.getCurrentTime.call(this);\n    }\n\n    /**\n     * Returns the current playback rate. (0=no playback, 1=normal playback)\n     *\n     * @return {number} The current playback rate\n     */\n    getPlaybackRate() {\n        return this.playbackRate;\n    }\n\n    /**\n     * Set the audio source playback rate.\n     *\n     * @param {number} value The playback rate to use\n     */\n    setPlaybackRate(value) {\n        this.playbackRate = value || 1;\n        this.source && this.source.playbackRate.setValueAtTime(\n            this.playbackRate,\n            this.ac.currentTime\n        );\n    }\n\n    /**\n     * Set a point in seconds for playback to stop at.\n     *\n     * @param {number} end Position to end at\n     * @version 3.3.0\n     */\n    setPlayEnd(end) {\n        this.scheduledPause = end;\n    }\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(631);\n"],"names":["root","factory","exports","module","define","amd","self","_style","_interopRequireDefault","require","_getId","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","CanvasEntry","instance","Constructor","_classCallCheck","this","wave","waveCtx","progress","progressCtx","start","end","id","getId","name","toLowerCase","canvasContextAttributes","drawTimeout","protoProps","staticProps","value","element","getContext","elementWidth","totalWidth","width","height","offsetLeft","elementSize","style","hasProgressCanvas","save","setTransform","clearRect","canvas","restore","waveColor","progressColor","fillStyle","getFillStyle","ctx","color","CanvasGradient","waveGradient","createLinearGradient","forEach","index","addColorStop","vertical","x","y","radius","fillRectToContext","drawRoundedRect","fillRect","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","peaks","absmax","halfH","offsetY","drawLineToContext","peak","h","first","Math","round","canvasStart","canvasEnd","scale","halfOffset","absmaxHalf","halfPixel","j","format","quality","type","_this","Promise","resolve","toBlob","toDataURL","newTotalWidth","elementStart","left","position","util","nodeInterop","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","hasOwnProperty","desc","set","_interopRequireWildcard","WeakMap","cacheBabelInterop","cacheNodeInterop","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","e","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","arguments","apply","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","getPrototypeOf","Drawer","_util$Observer","subClass","superClass","create","_inherits","_super","container","params","withOrientation","pixelRatio","lastPos","wrapper","el","styles","appendChild","document","createElement","display","userSelect","webkitUserSelect","fillParent","scrollParent","cursor","hideCursor","overflowX","hideScrollbar","overflowY","setupWrapperEvents","noPrevent","preventDefault","clientX","targetTouches","bbox","getBoundingClientRect","nominalWidth","parentWidth","getWidth","progressPixels","getProgressPixels","scrollLeft","scrollWidth","clamp","wrapperBbox","rtl","right","_this2","addEventListener","orientedEvent","scrollbarHeight","offsetHeight","clientHeight","clientY","bottom","interact","fireEvent","handleEvent","setWidth","clearWave","barWidth","drawBars","drawWave","percent","recenterOnPosition","immediate","half","clientWidth","maxScroll","offset","rate","autoCenterRate","max","min","newWidth","updateSize","minPxDelta","pos","autoCenter","newPos","autoCenterImmediately","updateProgress","unAll","parentNode","domElement","removeChild","channelIndex","Observer","_drawer","_drawer2","MultiCanvas","_Drawer","maxCanvasWidth","maxCanvasElementWidth","canvases","progressWave","EntryClass","drawingContextAttributes","overlap","ceil","barRadius","optimiseZoom","createWrapper","createElements","zIndex","top","overflow","boxSizing","borderRightStyle","pointerEvents","addCanvas","updateCursor","borderRightWidth","cursorWidth","borderRightColor","cursorColor","requiredCanvases","removeCanvas","canvasWidth","lastCanvas","leftOffset","entry","setLeft","updateDimensions","initWave","initProgress","push","lastEntry","parentElement","destroy","pop","_this3","frame","_this4","prepareDraw","_ref","hasMinVals","ch","peakIndexScale","bar","step","barGap","last","peakIndex","peakIndexRange","floor","peakIndexEnd","newPeak","abs","barMinHeight","_this5","_ref2","reflectedPeaks","len","drawLine","_this6","_ref3","splitChannelsOptions","channelColors","setFillStyles","applyCanvasTransforms","priority","canvasRect","wrapperRect","distance","clearTimeout","setTimeout","drawLines","startCanvas","endCanvas","intersection","x1","y1","x2","y2","_ref4","fillRects","splitChannels","filterChannels","includes","fn","drawIndex","normalizedMax","_this7","Array","channels","overallAbsMax","filteredChannels","filter","c","hideChannel","overlay","setHeight","relativeNormalization","map","channelPeaks","absMax","indexOf","barHeight","normalize","some","val","all","getImage","images","desiredWidth","totalCanvasWidth","stretchCanvas","progressPos","_get","property","receiver","base","object","_superPropBase","MediaElementWebAudio","_MediaElement","sourceMediaElement","setPlaybackRate","audioRate","createTimer","createVolumeNode","createScriptNode","createAnalyserNode","media","preload","createMediaElementSource","mediaElement","ac","connect","analyser","resumeAudioContext","destroyWebAudio","MediaElement","_webaudio","_WebAudio","currentTime","duration","paused","playbackRate","play","pause","volume","mediaType","elementPosition","isMuted","buffer","onPlayEnd","mediaListeners","error","waiting","canplay","ended","seeked","event","volumechange","muted","keys","removeEventListener","on","onAudioProcess","isPaused","getCurrentTime","url","controls","mediaControls","autoplay","src","prevMedia","querySelector","_load","elt","HTMLMediaElement","Error","load","_setupMediaListeners","setVolume","explicitDuration","Infinity","seekable","getDuration","isNaN","clearPlayEnd","seekTo","promise","setPlayEnd","_onPlayEnd","time","un","deviceId","setSinkId","reject","destroyed","removeMediaElementOnDestroy","WebAudio","PeakCache","clearPeakCache","peakCacheRanges","peakCacheLength","uncachedRanges","item","arr","concat","sort","a","b","uncachedRangePairs","peakCacheRangePairs","values","utilMax","utilmin","_max","_min","options","fetchHeaders","Headers","fetchRequest","Request","controller","AbortController","requestHeaders","header","append","responseType","fetchOptions","method","headers","mode","credentials","redirect","referrer","signal","fetch","then","response","progressAvailable","body","contentLength","onProgress","Response","ReadableStream","ProgressHandler","errMsg","ok","arrayBuffer","json","blob","text","status","catch","_observer","_reader","getReader","total","parseInt","loaded","read","done","lengthComputable","close","byteLength","enqueue","func","_len","args","_key","reqAnimationFrame","_requestAnimationFrame","prefix","random","toString","substring","_absMax","_frame","_debounce","_preventClick","_fetch","_clamp","_orientation","_silenceMode","largest","smallest","_disabledEventEmissions","handlers","callback","splice","handler","eventNames","_len2","_key2","_isDisabledEventEmission","isProxy","prop","mapProp","verticalPropMap","offsetTop","offsetWidth","preventClickHandler","stopPropagation","_default","window","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","silentAC","AudioContext","silentBS","createBufferSource","createBuffer","destination","tmp","innerHTML","audioSilentMode","children","disableRemotePlayback","remove","_mediaelement","_peakcache","_mediaelementWebaudio","_defineProperty","_toPropertyKey","_createClass","WaveSurfer","audioContext","audioScriptProcessor","backend","backgroundColor","dragSelection","desynchronized","forceDecode","ignoreSilenceMode","loopSelection","mediaContainer","minPxPerSec","partialRender","devicePixelRatio","screen","deviceXDPI","logicalXDPI","plugins","renderer","responsive","skipLength","splitDragSelection","xhr","assign","defaultParams","transform","setBackgroundColor","savedVolume","tmpEvents","currentRequest","arraybuffer","drawer","peakCache","supportsWebAudio","Backend","backends","initialisedPluginList","isDestroyed","isReady","prevWidth","_onResize","debounce","registerPlugins","createDrawer","createBackend","createPeakCache","plugin","addPlugin","deferInit","initPlugin","pluginStaticProp","Instance","getOwnPropertyNames","destroyPlugin","init","drawBuffer","getPlayedPercents","newVolume","getVolume","seconds","skip","seekAndCenter","recenter","_this8","isFinite","isWebAudioBackend","oldScrollParent","getPlaybackRate","setMute","mute","filters","channelIdx","background","channelIndices","wavesurfer","getPeaks","drawPeaks","newRanges","addRangeToPeakCache","pxPerSec","stretchCanvases","_this9","decodeArrayBuffer","data","loadDecodedBuffer","_this10","reader","FileReader","loadArrayBuffer","readAsArrayBuffer","empty","preloadIgnoreReasons","activeReasons","reason","console","warn","join","loadBuffer","loadMediaElement","_this11","action","once","getArrayBuffer","setPeaks","urlOrElt","_this12","loadElt","err","_this13","_this14","request","fetchFile","percentComplete","accuracy","noWindow","blobJSON","Blob","JSON","stringify","objURL","URL","createObjectURL","open","revokeObjectURL","cancel","abort","stop","disconnectSource","cancelAjax","clearTmpEvents","destroyAllPlugins","__VERSION__","PLAYING","PAUSED","FINISHED","_defineProperty2","_this$states","addOnAudioProcess","startPosition","getPlayedTime","removeOnAudioProcess","getAudioContext","lastPlay","scheduledPause","states","stateBehaviors","gainNode","mergedPeaks","offlineAc","scriptNode","source","splitPeaks","state","sinkStreamDestination","sinkAudioElement","webkitAudioContext","WaveSurferAudioContext","sampleRate","WaveSurferOfflineAudioContext","OfflineAudioContext","webkitOfflineAudioContext","setState","setLength","disconnect","setFilters","disconnectFilters","reduce","prev","curr","createScriptProcessor","scriptBufferSize","createJavaScriptNode","onaudioprocess","createAnalyser","createGain","createGainNode","Audio","createMediaStreamDestination","srcObject","stream","gain","setValueAtTime","errback","getOfflineAudioContext","decodeAudioData","numberOfChannels","newBuffer","sampleSize","sampleStep","chan","getChannelData","closeAudioContext","createSource","noteGrainOn","noteOff","resume","adjustedTime","wait","timeout","context","timestamp","later","Date","now","debounced","callNow","clear","flush","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}